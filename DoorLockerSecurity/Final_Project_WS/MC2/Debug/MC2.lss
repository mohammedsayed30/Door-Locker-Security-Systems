
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002106  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  00002106  0000219a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800178  00800178  000022b2  2**0
                  ALLOC
  3 .stab         0000261c  00000000  00000000  000022b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001327  00000000  00000000  000048d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00005bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00005d77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00005f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00007f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  000090c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000a0cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000a26c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000a52d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000addb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <main>
      8a:	0c 94 81 10 	jmp	0x2102	; 0x2102 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 58       	subi	r30, 0x88	; 136
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <main>:

#define F_CPU  8000000UL



int main(void){
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	2a 97       	sbiw	r28, 0x0a	; 10
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
	uint8 change_pass_key='+';
     cea:	8b e2       	ldi	r24, 0x2B	; 43
     cec:	8b 83       	std	Y+3, r24	; 0x03
	/* hold the allow number of Wrong passowrd*/
	uint8 count=3;
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	8a 83       	std	Y+2, r24	; 0x02
	SREG|=(1<<7);  /*to active the Interrupt*/
     cf2:	af e5       	ldi	r26, 0x5F	; 95
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	ef e5       	ldi	r30, 0x5F	; 95
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	80 68       	ori	r24, 0x80	; 128
     cfe:	8c 93       	st	X, r24
	/*to hold the state of password(match or not)*/
	uint8 matched_state=NOT_CORRECT;
     d00:	19 82       	std	Y+1, r1	; 0x01
    /*to active the dc motor*/
	DcMotor_init();
     d02:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DcMotor_init>

	/*create object from Structure UART_ConfigType*/
	TWI_ConfigType TWI_conf;
	/*setup the configuration of TWI*/
	TWI_conf.address=0b00000010;
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	8c 83       	std	Y+4, r24	; 0x04
	TWI_conf.bit_rate=0x02;
     d0a:	82 e0       	ldi	r24, 0x02	; 2
     d0c:	8d 83       	std	Y+5, r24	; 0x05
	TWI_init(&TWI_conf);
     d0e:	ce 01       	movw	r24, r28
     d10:	04 96       	adiw	r24, 0x04	; 4
     d12:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <TWI_init>
	/*create object from Structure UART_ConfigType*/
	UART_ConfigType UART_conf;
	/*setup the configuration of Uart*/

	UART_conf.baud_rate=9600;     /* 9600 buad_rate*/
     d16:	80 e8       	ldi	r24, 0x80	; 128
     d18:	95 e2       	ldi	r25, 0x25	; 37
     d1a:	9a 87       	std	Y+10, r25	; 0x0a
     d1c:	89 87       	std	Y+9, r24	; 0x09
	UART_conf.bit_data=EIGHT_BIT; /*use eight data_bit*/
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	8e 83       	std	Y+6, r24	; 0x06
	UART_conf.parity=DISABLE;     /*disable the parity*/
     d22:	1f 82       	std	Y+7, r1	; 0x07
	UART_conf.stop_bit=ONE_BIT;  /*use one stop bit*/
     d24:	18 86       	std	Y+8, r1	; 0x08
	/*active the UART Model*/
	UART_init(&UART_conf);
     d26:	ce 01       	movw	r24, r28
     d28:	06 96       	adiw	r24, 0x06	; 6
     d2a:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <UART_init>
	/*to check the two passwords */
	Check_Passwords();
     d2e:	0e 94 7f 07 	call	0xefe	; 0xefe <Check_Passwords>
   * 1-receive the password from HMI_ECU the user enter it
   * 2-to check the User_password with that one that
   * Save it in EEPROM_MEMORY
   */
	while(1){
       count=3;
     d32:	83 e0       	ldi	r24, 0x03	; 3
     d34:	8a 83       	std	Y+2, r24	; 0x02
     d36:	1d c0       	rjmp	.+58     	; 0xd72 <main+0x9c>
		while(matched_state==NOT_CORRECT && count){
			 count--;
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	81 50       	subi	r24, 0x01	; 1
     d3c:	8a 83       	std	Y+2, r24	; 0x02
			 change_pass_key=UART_recieveByte();
     d3e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <UART_recieveByte>
     d42:	8b 83       	std	Y+3, r24	; 0x03
			 matched_state=password_is_matched();
     d44:	0e 94 4e 08 	call	0x109c	; 0x109c <password_is_matched>
     d48:	89 83       	std	Y+1, r24	; 0x01
			 /*send byte to HMI_ECU*/
			 UART_sendByte(matched_state);
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <UART_sendByte>
			/*if two Passwords Matched*/
			if(matched_state==CORRECT && change_pass_key=='+'){
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	31 f4       	brne	.+12     	; 0xd62 <main+0x8c>
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	8b 32       	cpi	r24, 0x2B	; 43
     d5a:	19 f4       	brne	.+6      	; 0xd62 <main+0x8c>
				password_matchedWithClockWise();
     d5c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <password_matchedWithClockWise>
     d60:	08 c0       	rjmp	.+16     	; 0xd72 <main+0x9c>
			}
			else if(matched_state==CORRECT && change_pass_key=='-'){
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	29 f4       	brne	.+10     	; 0xd72 <main+0x9c>
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	8d 32       	cpi	r24, 0x2D	; 45
     d6c:	11 f4       	brne	.+4      	; 0xd72 <main+0x9c>
				/*to check the two passwords */
				Check_Passwords();
     d6e:	0e 94 7f 07 	call	0xefe	; 0xefe <Check_Passwords>
   * 2-to check the User_password with that one that
   * Save it in EEPROM_MEMORY
   */
	while(1){
       count=3;
		while(matched_state==NOT_CORRECT && count){
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	88 23       	and	r24, r24
     d76:	19 f4       	brne	.+6      	; 0xd7e <main+0xa8>
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	88 23       	and	r24, r24
     d7c:	e9 f6       	brne	.-70     	; 0xd38 <main+0x62>
				/*to check the two passwords */
				Check_Passwords();
			}
		}
		/* this mean that the three Times was wrong*/
		if(count==0){
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	88 23       	and	r24, r24
     d82:	11 f4       	brne	.+4      	; 0xd88 <main+0xb2>
			Activate_Buzzer();
     d84:	0e 94 24 09 	call	0x1248	; 0x1248 <Activate_Buzzer>
		}
		matched_state=NOT_CORRECT;
     d88:	19 82       	std	Y+1, r1	; 0x01
     d8a:	d3 cf       	rjmp	.-90     	; 0xd32 <main+0x5c>

00000d8c <Timer1_OVF2_CallBack>:
 * call back function that execute when ISR of Timer1
 * of OverFlow MOde Execute that response for stop
 * the motor after 15 Seconds
 */

void Timer1_OVF2_CallBack(void){
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	2e 97       	sbiw	r28, 0x0e	; 14
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
	tick++;
     da0:	80 91 78 01 	lds	r24, 0x0178
     da4:	8f 5f       	subi	r24, 0xFF	; 255
     da6:	80 93 78 01 	sts	0x0178, r24
	/* tick==2 that is mean that timer count 15 seconds*/
	if(tick==2){
     daa:	80 91 78 01 	lds	r24, 0x0178
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	09 f0       	breq	.+2      	; 0xdb4 <Timer1_OVF2_CallBack+0x28>
     db2:	7a c0       	rjmp	.+244    	; 0xea8 <Timer1_OVF2_CallBack+0x11c>
		/*stop the DC_Motor for three seconds*/
		DcMotor_Rotate(stop,0);
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	0e 94 8c 09 	call	0x1318	; 0x1318 <DcMotor_Rotate>
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e8       	ldi	r25, 0x80	; 128
     dc0:	ab e3       	ldi	r26, 0x3B	; 59
     dc2:	b5 e4       	ldi	r27, 0x45	; 69
     dc4:	8b 87       	std	Y+11, r24	; 0x0b
     dc6:	9c 87       	std	Y+12, r25	; 0x0c
     dc8:	ad 87       	std	Y+13, r26	; 0x0d
     dca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
     dce:	7c 85       	ldd	r23, Y+12	; 0x0c
     dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	4a ef       	ldi	r20, 0xFA	; 250
     dda:	54 e4       	ldi	r21, 0x44	; 68
     ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	8f 83       	std	Y+7, r24	; 0x07
     de6:	98 87       	std	Y+8, r25	; 0x08
     de8:	a9 87       	std	Y+9, r26	; 0x09
     dea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dec:	6f 81       	ldd	r22, Y+7	; 0x07
     dee:	78 85       	ldd	r23, Y+8	; 0x08
     df0:	89 85       	ldd	r24, Y+9	; 0x09
     df2:	9a 85       	ldd	r25, Y+10	; 0x0a
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	40 e8       	ldi	r20, 0x80	; 128
     dfa:	5f e3       	ldi	r21, 0x3F	; 63
     dfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e00:	88 23       	and	r24, r24
     e02:	2c f4       	brge	.+10     	; 0xe0e <Timer1_OVF2_CallBack+0x82>
		__ticks = 1;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	9e 83       	std	Y+6, r25	; 0x06
     e0a:	8d 83       	std	Y+5, r24	; 0x05
     e0c:	3f c0       	rjmp	.+126    	; 0xe8c <Timer1_OVF2_CallBack+0x100>
	else if (__tmp > 65535)
     e0e:	6f 81       	ldd	r22, Y+7	; 0x07
     e10:	78 85       	ldd	r23, Y+8	; 0x08
     e12:	89 85       	ldd	r24, Y+9	; 0x09
     e14:	9a 85       	ldd	r25, Y+10	; 0x0a
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	3f ef       	ldi	r19, 0xFF	; 255
     e1a:	4f e7       	ldi	r20, 0x7F	; 127
     e1c:	57 e4       	ldi	r21, 0x47	; 71
     e1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e22:	18 16       	cp	r1, r24
     e24:	4c f5       	brge	.+82     	; 0xe78 <Timer1_OVF2_CallBack+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e26:	6b 85       	ldd	r22, Y+11	; 0x0b
     e28:	7c 85       	ldd	r23, Y+12	; 0x0c
     e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	40 e2       	ldi	r20, 0x20	; 32
     e34:	51 e4       	ldi	r21, 0x41	; 65
     e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	bc 01       	movw	r22, r24
     e40:	cd 01       	movw	r24, r26
     e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	9e 83       	std	Y+6, r25	; 0x06
     e4c:	8d 83       	std	Y+5, r24	; 0x05
     e4e:	0f c0       	rjmp	.+30     	; 0xe6e <Timer1_OVF2_CallBack+0xe2>
     e50:	88 ec       	ldi	r24, 0xC8	; 200
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	9c 83       	std	Y+4, r25	; 0x04
     e56:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	9c 81       	ldd	r25, Y+4	; 0x04
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	f1 f7       	brne	.-4      	; 0xe5c <Timer1_OVF2_CallBack+0xd0>
     e60:	9c 83       	std	Y+4, r25	; 0x04
     e62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e64:	8d 81       	ldd	r24, Y+5	; 0x05
     e66:	9e 81       	ldd	r25, Y+6	; 0x06
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	9e 83       	std	Y+6, r25	; 0x06
     e6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6e:	8d 81       	ldd	r24, Y+5	; 0x05
     e70:	9e 81       	ldd	r25, Y+6	; 0x06
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	69 f7       	brne	.-38     	; 0xe50 <Timer1_OVF2_CallBack+0xc4>
     e76:	14 c0       	rjmp	.+40     	; 0xea0 <Timer1_OVF2_CallBack+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e78:	6f 81       	ldd	r22, Y+7	; 0x07
     e7a:	78 85       	ldd	r23, Y+8	; 0x08
     e7c:	89 85       	ldd	r24, Y+9	; 0x09
     e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	8d 81       	ldd	r24, Y+5	; 0x05
     e8e:	9e 81       	ldd	r25, Y+6	; 0x06
     e90:	9a 83       	std	Y+2, r25	; 0x02
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	9a 81       	ldd	r25, Y+2	; 0x02
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <Timer1_OVF2_CallBack+0x10c>
     e9c:	9a 83       	std	Y+2, r25	; 0x02
     e9e:	89 83       	std	Y+1, r24	; 0x01
		/*wait for 3 seconds*/
		_delay_ms(3000);
		/*rotate the DC in anti_clock_wise direction*/
		DcMotor_Rotate(anti_clock_wise,100);
     ea0:	82 e0       	ldi	r24, 0x02	; 2
     ea2:	64 e6       	ldi	r22, 0x64	; 100
     ea4:	0e 94 8c 09 	call	0x1318	; 0x1318 <DcMotor_Rotate>
	}
	if(tick==4){
     ea8:	80 91 78 01 	lds	r24, 0x0178
     eac:	84 30       	cpi	r24, 0x04	; 4
     eae:	41 f4       	brne	.+16     	; 0xec0 <Timer1_OVF2_CallBack+0x134>
		/*stop the DC_Motor*/
		DcMotor_Rotate(stop,0);
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	0e 94 8c 09 	call	0x1318	; 0x1318 <DcMotor_Rotate>
		Timer1_deInit();
     eb8:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <Timer1_deInit>
		tick=0;
     ebc:	10 92 78 01 	sts	0x0178, r1
	}
}
     ec0:	2e 96       	adiw	r28, 0x0e	; 14
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <Timer1_Buzzer_Off>:
 * call back function that execute when ISR of Timer1
 * of OverFlow MOde Execute that response for disable
 * the Buzzer after 60 Seconds
 */

void Timer1_Buzzer_Off(void){
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
	tick++;
     eda:	80 91 78 01 	lds	r24, 0x0178
     ede:	8f 5f       	subi	r24, 0xFF	; 255
     ee0:	80 93 78 01 	sts	0x0178, r24
	if(tick==8){ /*it means 60 seconds*/
     ee4:	80 91 78 01 	lds	r24, 0x0178
     ee8:	88 30       	cpi	r24, 0x08	; 8
     eea:	31 f4       	brne	.+12     	; 0xef8 <Timer1_Buzzer_Off+0x26>
		tick=0;
     eec:	10 92 78 01 	sts	0x0178, r1
		Timer1_deInit();
     ef0:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <Timer1_deInit>
		Buzzer_off();
     ef4:	0e 94 65 09 	call	0x12ca	; 0x12ca <Buzzer_off>
	}
}
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <Check_Passwords>:
/*to check the two passwords */
void Check_Passwords(void){
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	61 97       	sbiw	r28, 0x11	; 17
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	f8 94       	cli
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	cd bf       	out	0x3d, r28	; 61
	uint8 check=CORRECT;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	89 8b       	std	Y+17, r24	; 0x11
	uint16 count;
	/*recieve the first Password*/
    UART_recieveString(arr2_password);
     f16:	82 e8       	ldi	r24, 0x82	; 130
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <UART_recieveString>
	/*recieve the second Password*/
    UART_recieveString(arr2_repeated_password);
     f1e:	8b e7       	ldi	r24, 0x7B	; 123
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <UART_recieveString>
	/*check the two Passwords*/
	for(count=0;count<PAS_SIZE;count++){
     f26:	18 8a       	std	Y+16, r1	; 0x10
     f28:	1f 86       	std	Y+15, r1	; 0x0f
     f2a:	14 c0       	rjmp	.+40     	; 0xf54 <Check_Passwords+0x56>
		if(arr2_password[count]!=arr2_repeated_password[count]){
     f2c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f2e:	98 89       	ldd	r25, Y+16	; 0x10
     f30:	fc 01       	movw	r30, r24
     f32:	ee 57       	subi	r30, 0x7E	; 126
     f34:	fe 4f       	sbci	r31, 0xFE	; 254
     f36:	20 81       	ld	r18, Z
     f38:	8f 85       	ldd	r24, Y+15	; 0x0f
     f3a:	98 89       	ldd	r25, Y+16	; 0x10
     f3c:	fc 01       	movw	r30, r24
     f3e:	e5 58       	subi	r30, 0x85	; 133
     f40:	fe 4f       	sbci	r31, 0xFE	; 254
     f42:	80 81       	ld	r24, Z
     f44:	28 17       	cp	r18, r24
     f46:	09 f0       	breq	.+2      	; 0xf4a <Check_Passwords+0x4c>
			check=NOT_CORRECT;
     f48:	19 8a       	std	Y+17, r1	; 0x11
	/*recieve the first Password*/
    UART_recieveString(arr2_password);
	/*recieve the second Password*/
    UART_recieveString(arr2_repeated_password);
	/*check the two Passwords*/
	for(count=0;count<PAS_SIZE;count++){
     f4a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f4c:	98 89       	ldd	r25, Y+16	; 0x10
     f4e:	01 96       	adiw	r24, 0x01	; 1
     f50:	98 8b       	std	Y+16, r25	; 0x10
     f52:	8f 87       	std	Y+15, r24	; 0x0f
     f54:	8f 85       	ldd	r24, Y+15	; 0x0f
     f56:	98 89       	ldd	r25, Y+16	; 0x10
     f58:	85 30       	cpi	r24, 0x05	; 5
     f5a:	91 05       	cpc	r25, r1
     f5c:	38 f3       	brcs	.-50     	; 0xf2c <Check_Passwords+0x2e>
		if(arr2_password[count]!=arr2_repeated_password[count]){
			check=NOT_CORRECT;
		}
	}
	UART_sendByte(check);
     f5e:	89 89       	ldd	r24, Y+17	; 0x11
     f60:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <UART_sendByte>
	//_delay_us(10);
	if(check==CORRECT){
     f64:	89 89       	ldd	r24, Y+17	; 0x11
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	09 f0       	breq	.+2      	; 0xf6c <Check_Passwords+0x6e>
     f6a:	8f c0       	rjmp	.+286    	; 0x108a <Check_Passwords+0x18c>
		for(count=0;count<PAS_SIZE;count++){
     f6c:	18 8a       	std	Y+16, r1	; 0x10
     f6e:	1f 86       	std	Y+15, r1	; 0x0f
     f70:	86 c0       	rjmp	.+268    	; 0x107e <Check_Passwords+0x180>
			/*save the Password in the EEPROM*/
			EEPROM_writeByte(0x0311+count,arr2_password[count]);
     f72:	8f 85       	ldd	r24, Y+15	; 0x0f
     f74:	98 89       	ldd	r25, Y+16	; 0x10
     f76:	9c 01       	movw	r18, r24
     f78:	2f 5e       	subi	r18, 0xEF	; 239
     f7a:	3c 4f       	sbci	r19, 0xFC	; 252
     f7c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f7e:	98 89       	ldd	r25, Y+16	; 0x10
     f80:	fc 01       	movw	r30, r24
     f82:	ee 57       	subi	r30, 0x7E	; 126
     f84:	fe 4f       	sbci	r31, 0xFE	; 254
     f86:	40 81       	ld	r20, Z
     f88:	c9 01       	movw	r24, r18
     f8a:	64 2f       	mov	r22, r20
     f8c:	0e 94 c1 09 	call	0x1382	; 0x1382 <EEPROM_writeByte>
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	a0 e2       	ldi	r26, 0x20	; 32
     f96:	b1 e4       	ldi	r27, 0x41	; 65
     f98:	8b 87       	std	Y+11, r24	; 0x0b
     f9a:	9c 87       	std	Y+12, r25	; 0x0c
     f9c:	ad 87       	std	Y+13, r26	; 0x0d
     f9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	4a ef       	ldi	r20, 0xFA	; 250
     fae:	54 e4       	ldi	r21, 0x44	; 68
     fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	8f 83       	std	Y+7, r24	; 0x07
     fba:	98 87       	std	Y+8, r25	; 0x08
     fbc:	a9 87       	std	Y+9, r26	; 0x09
     fbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fc0:	6f 81       	ldd	r22, Y+7	; 0x07
     fc2:	78 85       	ldd	r23, Y+8	; 0x08
     fc4:	89 85       	ldd	r24, Y+9	; 0x09
     fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e8       	ldi	r20, 0x80	; 128
     fce:	5f e3       	ldi	r21, 0x3F	; 63
     fd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fd4:	88 23       	and	r24, r24
     fd6:	2c f4       	brge	.+10     	; 0xfe2 <Check_Passwords+0xe4>
		__ticks = 1;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	9e 83       	std	Y+6, r25	; 0x06
     fde:	8d 83       	std	Y+5, r24	; 0x05
     fe0:	3f c0       	rjmp	.+126    	; 0x1060 <Check_Passwords+0x162>
	else if (__tmp > 65535)
     fe2:	6f 81       	ldd	r22, Y+7	; 0x07
     fe4:	78 85       	ldd	r23, Y+8	; 0x08
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	3f ef       	ldi	r19, 0xFF	; 255
     fee:	4f e7       	ldi	r20, 0x7F	; 127
     ff0:	57 e4       	ldi	r21, 0x47	; 71
     ff2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ff6:	18 16       	cp	r1, r24
     ff8:	4c f5       	brge	.+82     	; 0x104c <Check_Passwords+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
     ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1000:	9e 85       	ldd	r25, Y+14	; 0x0e
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e2       	ldi	r20, 0x20	; 32
    1008:	51 e4       	ldi	r21, 0x41	; 65
    100a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	9e 83       	std	Y+6, r25	; 0x06
    1020:	8d 83       	std	Y+5, r24	; 0x05
    1022:	0f c0       	rjmp	.+30     	; 0x1042 <Check_Passwords+0x144>
    1024:	88 ec       	ldi	r24, 0xC8	; 200
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	9c 83       	std	Y+4, r25	; 0x04
    102a:	8b 83       	std	Y+3, r24	; 0x03
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <Check_Passwords+0x132>
    1034:	9c 83       	std	Y+4, r25	; 0x04
    1036:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	9e 83       	std	Y+6, r25	; 0x06
    1040:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	9e 81       	ldd	r25, Y+6	; 0x06
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	69 f7       	brne	.-38     	; 0x1024 <Check_Passwords+0x126>
    104a:	14 c0       	rjmp	.+40     	; 0x1074 <Check_Passwords+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    104c:	6f 81       	ldd	r22, Y+7	; 0x07
    104e:	78 85       	ldd	r23, Y+8	; 0x08
    1050:	89 85       	ldd	r24, Y+9	; 0x09
    1052:	9a 85       	ldd	r25, Y+10	; 0x0a
    1054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	9e 83       	std	Y+6, r25	; 0x06
    105e:	8d 83       	std	Y+5, r24	; 0x05
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	9e 81       	ldd	r25, Y+6	; 0x06
    1064:	9a 83       	std	Y+2, r25	; 0x02
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <Check_Passwords+0x16e>
    1070:	9a 83       	std	Y+2, r25	; 0x02
    1072:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	UART_sendByte(check);
	//_delay_us(10);
	if(check==CORRECT){
		for(count=0;count<PAS_SIZE;count++){
    1074:	8f 85       	ldd	r24, Y+15	; 0x0f
    1076:	98 89       	ldd	r25, Y+16	; 0x10
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	98 8b       	std	Y+16, r25	; 0x10
    107c:	8f 87       	std	Y+15, r24	; 0x0f
    107e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1080:	98 89       	ldd	r25, Y+16	; 0x10
    1082:	85 30       	cpi	r24, 0x05	; 5
    1084:	91 05       	cpc	r25, r1
    1086:	08 f4       	brcc	.+2      	; 0x108a <Check_Passwords+0x18c>
    1088:	74 cf       	rjmp	.-280    	; 0xf72 <Check_Passwords+0x74>
			/*save the Password in the EEPROM*/
			EEPROM_writeByte(0x0311+count,arr2_password[count]);
			_delay_ms(10);
		}
	}
}
    108a:	61 96       	adiw	r28, 0x11	; 17
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <password_is_matched>:
/*
 * to confirm that two passwords are matched
 */
uint8 password_is_matched(void){
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	62 97       	sbiw	r28, 0x12	; 18
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
	/*hold the data from eeprom*/
	uint8 data,state=CORRECT;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	89 8b       	std	Y+17, r24	; 0x11
	uint16 count;
	UART_recieveString(arr_InputPassword);
    10b4:	89 e8       	ldi	r24, 0x89	; 137
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <UART_recieveString>
	for(count=0;count<PAS_SIZE;count++){
    10bc:	18 8a       	std	Y+16, r1	; 0x10
    10be:	1f 86       	std	Y+15, r1	; 0x0f
    10c0:	8c c0       	rjmp	.+280    	; 0x11da <password_is_matched+0x13e>
		EEPROM_readByte(0x0311+count,&data);
    10c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c4:	98 89       	ldd	r25, Y+16	; 0x10
    10c6:	8f 5e       	subi	r24, 0xEF	; 239
    10c8:	9c 4f       	sbci	r25, 0xFC	; 252
    10ca:	9e 01       	movw	r18, r28
    10cc:	2e 5e       	subi	r18, 0xEE	; 238
    10ce:	3f 4f       	sbci	r19, 0xFF	; 255
    10d0:	b9 01       	movw	r22, r18
    10d2:	0e 94 02 0a 	call	0x1404	; 0x1404 <EEPROM_readByte>
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	a0 e2       	ldi	r26, 0x20	; 32
    10dc:	b1 e4       	ldi	r27, 0x41	; 65
    10de:	8b 87       	std	Y+11, r24	; 0x0b
    10e0:	9c 87       	std	Y+12, r25	; 0x0c
    10e2:	ad 87       	std	Y+13, r26	; 0x0d
    10e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	4a ef       	ldi	r20, 0xFA	; 250
    10f4:	54 e4       	ldi	r21, 0x44	; 68
    10f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	8f 83       	std	Y+7, r24	; 0x07
    1100:	98 87       	std	Y+8, r25	; 0x08
    1102:	a9 87       	std	Y+9, r26	; 0x09
    1104:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e8       	ldi	r20, 0x80	; 128
    1114:	5f e3       	ldi	r21, 0x3F	; 63
    1116:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    111a:	88 23       	and	r24, r24
    111c:	2c f4       	brge	.+10     	; 0x1128 <password_is_matched+0x8c>
		__ticks = 1;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	9e 83       	std	Y+6, r25	; 0x06
    1124:	8d 83       	std	Y+5, r24	; 0x05
    1126:	3f c0       	rjmp	.+126    	; 0x11a6 <password_is_matched+0x10a>
	else if (__tmp > 65535)
    1128:	6f 81       	ldd	r22, Y+7	; 0x07
    112a:	78 85       	ldd	r23, Y+8	; 0x08
    112c:	89 85       	ldd	r24, Y+9	; 0x09
    112e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	3f ef       	ldi	r19, 0xFF	; 255
    1134:	4f e7       	ldi	r20, 0x7F	; 127
    1136:	57 e4       	ldi	r21, 0x47	; 71
    1138:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    113c:	18 16       	cp	r1, r24
    113e:	4c f5       	brge	.+82     	; 0x1192 <password_is_matched+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1140:	6b 85       	ldd	r22, Y+11	; 0x0b
    1142:	7c 85       	ldd	r23, Y+12	; 0x0c
    1144:	8d 85       	ldd	r24, Y+13	; 0x0d
    1146:	9e 85       	ldd	r25, Y+14	; 0x0e
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e2       	ldi	r20, 0x20	; 32
    114e:	51 e4       	ldi	r21, 0x41	; 65
    1150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	bc 01       	movw	r22, r24
    115a:	cd 01       	movw	r24, r26
    115c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	9e 83       	std	Y+6, r25	; 0x06
    1166:	8d 83       	std	Y+5, r24	; 0x05
    1168:	0f c0       	rjmp	.+30     	; 0x1188 <password_is_matched+0xec>
    116a:	88 ec       	ldi	r24, 0xC8	; 200
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	9c 83       	std	Y+4, r25	; 0x04
    1170:	8b 83       	std	Y+3, r24	; 0x03
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <password_is_matched+0xda>
    117a:	9c 83       	std	Y+4, r25	; 0x04
    117c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	9e 83       	std	Y+6, r25	; 0x06
    1186:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	69 f7       	brne	.-38     	; 0x116a <password_is_matched+0xce>
    1190:	14 c0       	rjmp	.+40     	; 0x11ba <password_is_matched+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1192:	6f 81       	ldd	r22, Y+7	; 0x07
    1194:	78 85       	ldd	r23, Y+8	; 0x08
    1196:	89 85       	ldd	r24, Y+9	; 0x09
    1198:	9a 85       	ldd	r25, Y+10	; 0x0a
    119a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	9e 83       	std	Y+6, r25	; 0x06
    11a4:	8d 83       	std	Y+5, r24	; 0x05
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	9e 81       	ldd	r25, Y+6	; 0x06
    11aa:	9a 83       	std	Y+2, r25	; 0x02
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	9a 81       	ldd	r25, Y+2	; 0x02
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	f1 f7       	brne	.-4      	; 0x11b2 <password_is_matched+0x116>
    11b6:	9a 83       	std	Y+2, r25	; 0x02
    11b8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		if(arr_InputPassword[count]!=data){
    11ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    11bc:	98 89       	ldd	r25, Y+16	; 0x10
    11be:	fc 01       	movw	r30, r24
    11c0:	e7 57       	subi	r30, 0x77	; 119
    11c2:	fe 4f       	sbci	r31, 0xFE	; 254
    11c4:	90 81       	ld	r25, Z
    11c6:	8a 89       	ldd	r24, Y+18	; 0x12
    11c8:	98 17       	cp	r25, r24
    11ca:	11 f0       	breq	.+4      	; 0x11d0 <password_is_matched+0x134>
			state=NOT_CORRECT;
    11cc:	19 8a       	std	Y+17, r1	; 0x11
    11ce:	0b c0       	rjmp	.+22     	; 0x11e6 <password_is_matched+0x14a>
uint8 password_is_matched(void){
	/*hold the data from eeprom*/
	uint8 data,state=CORRECT;
	uint16 count;
	UART_recieveString(arr_InputPassword);
	for(count=0;count<PAS_SIZE;count++){
    11d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11d2:	98 89       	ldd	r25, Y+16	; 0x10
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	98 8b       	std	Y+16, r25	; 0x10
    11d8:	8f 87       	std	Y+15, r24	; 0x0f
    11da:	8f 85       	ldd	r24, Y+15	; 0x0f
    11dc:	98 89       	ldd	r25, Y+16	; 0x10
    11de:	85 30       	cpi	r24, 0x05	; 5
    11e0:	91 05       	cpc	r25, r1
    11e2:	08 f4       	brcc	.+2      	; 0x11e6 <password_is_matched+0x14a>
    11e4:	6e cf       	rjmp	.-292    	; 0x10c2 <password_is_matched+0x26>
		if(arr_InputPassword[count]!=data){
			state=NOT_CORRECT;
			break;
		}
	}
	return state;
    11e6:	89 89       	ldd	r24, Y+17	; 0x11
}
    11e8:	62 96       	adiw	r28, 0x12	; 18
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <password_matchedWithClockWise>:
 *
 * Description:
 *
 * execute some actions when two passwords are matched
 */
void password_matchedWithClockWise(void){
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <password_matchedWithClockWise+0x6>
    1200:	00 d0       	rcall	.+0      	; 0x1202 <password_matchedWithClockWise+0x8>
    1202:	00 d0       	rcall	.+0      	; 0x1204 <password_matchedWithClockWise+0xa>
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
	/*to rotate in clock_wise and with maximum speed*/
	DcMotor_Rotate(clock_wise,100);
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	64 e6       	ldi	r22, 0x64	; 100
    120c:	0e 94 8c 09 	call	0x1318	; 0x1318 <DcMotor_Rotate>
	/*send a required message to HMI_ECU*/
	UART_sendString("Door is Unlock#");
    1210:	80 e6       	ldi	r24, 0x60	; 96
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <UART_sendString>
	 * Note:
	 * I can use Compare mode and make the compare value
	 * equal=60000
	 * but I Wanna do this to test both modes
	 * */
	timer1_conf.mode=NORMAL_MODE;
    1218:	1d 82       	std	Y+5, r1	; 0x05
	/*to make INterrupt Every 7.5 Seconds
	 *that is mean I need 2-Interrupt for 15 seconds
	 */
	timer1_conf.initial_value=5536;  /*start count from 5536*/
    121a:	80 ea       	ldi	r24, 0xA0	; 160
    121c:	95 e1       	ldi	r25, 0x15	; 21
    121e:	9a 83       	std	Y+2, r25	; 0x02
    1220:	89 83       	std	Y+1, r24	; 0x01
	timer1_conf.prescalar=CLK_1024;
    1222:	85 e0       	ldi	r24, 0x05	; 5
    1224:	8e 83       	std	Y+6, r24	; 0x06
	Timer1_init(&timer1_conf);
    1226:	ce 01       	movw	r24, r28
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <Timer1_init>
    //_delay_ms(1);
	Timer1_setCallBack(Timer1_OVF2_CallBack);
    122e:	86 ec       	ldi	r24, 0xC6	; 198
    1230:	96 e0       	ldi	r25, 0x06	; 6
    1232:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <Timer1_setCallBack>
}
    1236:	26 96       	adiw	r28, 0x06	; 6
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <Activate_Buzzer>:
 *
 * Description:
 *
 *Activate the Buzzer for 1 Minute Using Timer1
 */
void Activate_Buzzer(void){
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <Activate_Buzzer+0x6>
    124e:	00 d0       	rcall	.+0      	; 0x1250 <Activate_Buzzer+0x8>
    1250:	00 d0       	rcall	.+0      	; 0x1252 <Activate_Buzzer+0xa>
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
	Timer1_ConfigType timer1_conf;
	/*the required configurations*/
	timer1_conf.mode=COMPARE_MODE; /*use Compare Mode*/
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	8d 83       	std	Y+5, r24	; 0x05
	timer1_conf.initial_value=0;  /*start count from 0*/
    125a:	1a 82       	std	Y+2, r1	; 0x02
    125c:	19 82       	std	Y+1, r1	; 0x01
	timer1_conf.prescalar=CLK_1024;
    125e:	85 e0       	ldi	r24, 0x05	; 5
    1260:	8e 83       	std	Y+6, r24	; 0x06
	/*that is mean 60 seconds with 1MHZ with 1 Interrupt*/
	timer1_conf.compare_value=60000;
    1262:	80 e6       	ldi	r24, 0x60	; 96
    1264:	9a ee       	ldi	r25, 0xEA	; 234
    1266:	9c 83       	std	Y+4, r25	; 0x04
    1268:	8b 83       	std	Y+3, r24	; 0x03
	Timer1_init(&timer1_conf);
    126a:	ce 01       	movw	r24, r28
    126c:	01 96       	adiw	r24, 0x01	; 1
    126e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <Timer1_init>
	Buzzer_on();
    1272:	0e 94 59 09 	call	0x12b2	; 0x12b2 <Buzzer_on>
	Timer1_setCallBack(Timer1_Buzzer_Off);
    1276:	89 e6       	ldi	r24, 0x69	; 105
    1278:	97 e0       	ldi	r25, 0x07	; 7
    127a:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <Timer1_setCallBack>
}
    127e:	26 96       	adiw	r28, 0x06	; 6
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <Buzzer_init>:
 *
 * to initialize the Buzzer With its configurations Like:
 * -->setup the direction of pin
 * -->turn it off at the begging
 */
void Buzzer_init(void){
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
	/* setup the pin_Buzzer as output pin*/
	GPIO_setupPinDirection( BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	65 e0       	ldi	r22, 0x05	; 5
    129c:	41 e0       	ldi	r20, 0x01	; 1
    129e:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <GPIO_setupPinDirection>
	/*Turn off the Buzzer at the begging*/
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID ,LOGIC_LOW);
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	65 e0       	ldi	r22, 0x05	; 5
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_writePin>
}
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <Buzzer_on>:
 *
 * Description:
 *
 * to enable the Buzzer
 */
void Buzzer_on(void){
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
	/*Turn ON the Buzzer */
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID ,LOGIC_HIGH);
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	65 e0       	ldi	r22, 0x05	; 5
    12be:	41 e0       	ldi	r20, 0x01	; 1
    12c0:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_writePin>
}
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <Buzzer_off>:
 *
 * Description:
 *
 * to disable the Buzzer
 */
void Buzzer_off(void){
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
	/*Turn OFF the Buzzer */
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID ,LOGIC_LOW);
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	65 e0       	ldi	r22, 0x05	; 5
    12d6:	40 e0       	ldi	r20, 0x00	; 0
    12d8:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_writePin>
}
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <DcMotor_init>:
 * 1-the function that response for setup the port and the pins of motor
 * 2-stop the DC_motor at the beginning
 */


void DcMotor_init(void){
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
	/*setup the direction of the two pins of DC_Motor*/
	GPIO_setupPinDirection(DC_PORT_ID ,DC_FIRST_PIN_ID,PIN_OUTPUT);
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	41 e0       	ldi	r20, 0x01	; 1
    12f0:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_PORT_ID ,DC_SECOND_PIN_ID,PIN_OUTPUT);
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	62 e0       	ldi	r22, 0x02	; 2
    12f8:	41 e0       	ldi	r20, 0x01	; 1
    12fa:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <GPIO_setupPinDirection>
	/*stop the motor at the beginning*/
	GPIO_writePin(DC_PORT_ID,DC_FIRST_PIN_ID,LOGIC_LOW );
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	61 e0       	ldi	r22, 0x01	; 1
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_writePin>
	GPIO_writePin(DC_PORT_ID,DC_SECOND_PIN_ID,LOGIC_LOW );
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	62 e0       	ldi	r22, 0x02	; 2
    130c:	40 e0       	ldi	r20, 0x00	; 0
    130e:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_writePin>
}
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <DcMotor_Rotate>:
 * 1-the function that response for rotate the DC Motor CW or A-CW
 * or Stop the Motor based on the state input
 * 2-Send the Required duty  cycle to the PWM based on the required
 * speed Value(0----->100)
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <DcMotor_Rotate+0x6>
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	6a 83       	std	Y+2, r22	; 0x02

	if(state == clock_wise){
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	59 f4       	brne	.+22     	; 0x1342 <DcMotor_Rotate+0x2a>
		/* rotate with clock wise direction*/
		GPIO_writePin(DC_PORT_ID,DC_FIRST_PIN_ID,LOGIC_LOW );
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	61 e0       	ldi	r22, 0x01	; 1
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_writePin>
		GPIO_writePin(DC_PORT_ID,DC_SECOND_PIN_ID,LOGIC_HIGH );
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	62 e0       	ldi	r22, 0x02	; 2
    133a:	41 e0       	ldi	r20, 0x01	; 1
    133c:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_writePin>
    1340:	18 c0       	rjmp	.+48     	; 0x1372 <DcMotor_Rotate+0x5a>
	}
	else if(state == anti_clock_wise){
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	82 30       	cpi	r24, 0x02	; 2
    1346:	59 f4       	brne	.+22     	; 0x135e <DcMotor_Rotate+0x46>
		/* rotate with anti clock wise direction*/
		GPIO_writePin(DC_PORT_ID,DC_FIRST_PIN_ID,LOGIC_HIGH);
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	61 e0       	ldi	r22, 0x01	; 1
    134c:	41 e0       	ldi	r20, 0x01	; 1
    134e:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_writePin>
		GPIO_writePin(DC_PORT_ID,DC_SECOND_PIN_ID,LOGIC_LOW);
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	62 e0       	ldi	r22, 0x02	; 2
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_writePin>
    135c:	0a c0       	rjmp	.+20     	; 0x1372 <DcMotor_Rotate+0x5a>
	}
	else{      /*stop the DC_Motor*/
		GPIO_writePin(DC_PORT_ID,DC_FIRST_PIN_ID,LOGIC_LOW);
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	61 e0       	ldi	r22, 0x01	; 1
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_writePin>
		GPIO_writePin(DC_PORT_ID,DC_SECOND_PIN_ID,LOGIC_LOW);
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	62 e0       	ldi	r22, 0x02	; 2
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	0e 94 4d 0b 	call	0x169a	; 0x169a <GPIO_writePin>
	}
	/*call PWM function to detect Speed*/
	PWM_Timer0_Start(speed);
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <PWM_Timer0_Start>
}
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <EEPROM_writeByte>:
 *
 * Description:
 *
 * to the master write byte to the slave(EEPROM) by the I2C Model
 */
uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data){
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	00 d0       	rcall	.+0      	; 0x1388 <EEPROM_writeByte+0x6>
    1388:	00 d0       	rcall	.+0      	; 0x138a <EEPROM_writeByte+0x8>
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	6b 83       	std	Y+3, r22	; 0x03
	/*transimate send start bit*/
	TWI_start();
    1394:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <TWI_start>
	 if (TWI_getStatus() != TWI_START)/*to ensure that start bit sended*/
    1398:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <TWI_getStatus>
    139c:	88 30       	cpi	r24, 0x08	; 8
    139e:	11 f0       	breq	.+4      	; 0x13a4 <EEPROM_writeByte+0x22>
	        return ERROR;
    13a0:	1c 82       	std	Y+4, r1	; 0x04
    13a2:	28 c0       	rjmp	.+80     	; 0x13f4 <EEPROM_writeByte+0x72>
	 /*send the divece address where we should take the (A10 A9 A8)
	  * from the memory locations
	  */
	   TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	9a 81       	ldd	r25, Y+2	; 0x02
    13a8:	80 70       	andi	r24, 0x00	; 0
    13aa:	97 70       	andi	r25, 0x07	; 7
    13ac:	88 0f       	add	r24, r24
    13ae:	89 2f       	mov	r24, r25
    13b0:	88 1f       	adc	r24, r24
    13b2:	99 0b       	sbc	r25, r25
    13b4:	91 95       	neg	r25
    13b6:	80 6a       	ori	r24, 0xA0	; 160
    13b8:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <TWI_writeByte>
	    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    13bc:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <TWI_getStatus>
    13c0:	88 31       	cpi	r24, 0x18	; 24
    13c2:	11 f0       	breq	.+4      	; 0x13c8 <EEPROM_writeByte+0x46>
	        return ERROR;
    13c4:	1c 82       	std	Y+4, r1	; 0x04
    13c6:	16 c0       	rjmp	.+44     	; 0x13f4 <EEPROM_writeByte+0x72>
	    /*send the required address locations*/
		TWI_writeByte((uint8)(u16addr));
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <TWI_writeByte>
		if (TWI_getStatus() != TWI_MT_DATA_ACK)
    13ce:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <TWI_getStatus>
    13d2:	88 32       	cpi	r24, 0x28	; 40
    13d4:	11 f0       	breq	.+4      	; 0x13da <EEPROM_writeByte+0x58>
		     return ERROR;
    13d6:	1c 82       	std	Y+4, r1	; 0x04
    13d8:	0d c0       	rjmp	.+26     	; 0x13f4 <EEPROM_writeByte+0x72>
		   /* write byte to eeprom */
		    TWI_writeByte(u8data);
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <TWI_writeByte>
		    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    13e0:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <TWI_getStatus>
    13e4:	88 32       	cpi	r24, 0x28	; 40
    13e6:	11 f0       	breq	.+4      	; 0x13ec <EEPROM_writeByte+0x6a>
		        return ERROR;
    13e8:	1c 82       	std	Y+4, r1	; 0x04
    13ea:	04 c0       	rjmp	.+8      	; 0x13f4 <EEPROM_writeByte+0x72>

		    /* Send the Stop Bit */
		    TWI_stop();
    13ec:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <TWI_stop>
		    return SUCCESS;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	8c 83       	std	Y+4, r24	; 0x04
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <EEPROM_readByte>:
 *
 * Description:
 *
 * to the master reade byte from the slave(EEPROM) by the I2C Model
 */
uint8 EEPROM_readByte(uint16 u16addr,uint8 *u8data){
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	00 d0       	rcall	.+0      	; 0x140a <EEPROM_readByte+0x6>
    140a:	00 d0       	rcall	.+0      	; 0x140c <EEPROM_readByte+0x8>
    140c:	0f 92       	push	r0
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	9a 83       	std	Y+2, r25	; 0x02
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	7c 83       	std	Y+4, r23	; 0x04
    1418:	6b 83       	std	Y+3, r22	; 0x03
	/*transimate send start bit*/
	TWI_start();
    141a:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <TWI_start>
	 if (TWI_getStatus() != TWI_START)/*to ensure that start bit sended*/
    141e:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <TWI_getStatus>
    1422:	88 30       	cpi	r24, 0x08	; 8
    1424:	11 f0       	breq	.+4      	; 0x142a <EEPROM_readByte+0x26>
	        return ERROR;
    1426:	1d 82       	std	Y+5, r1	; 0x05
    1428:	44 c0       	rjmp	.+136    	; 0x14b2 <EEPROM_readByte+0xae>
	 /*send the divece address where we should take the (A10 A9 A8)
	  * from the memory locations
	  */
	   TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
    142e:	80 70       	andi	r24, 0x00	; 0
    1430:	97 70       	andi	r25, 0x07	; 7
    1432:	88 0f       	add	r24, r24
    1434:	89 2f       	mov	r24, r25
    1436:	88 1f       	adc	r24, r24
    1438:	99 0b       	sbc	r25, r25
    143a:	91 95       	neg	r25
    143c:	80 6a       	ori	r24, 0xA0	; 160
    143e:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <TWI_writeByte>
	    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1442:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <TWI_getStatus>
    1446:	88 31       	cpi	r24, 0x18	; 24
    1448:	11 f0       	breq	.+4      	; 0x144e <EEPROM_readByte+0x4a>
	        return ERROR;
    144a:	1d 82       	std	Y+5, r1	; 0x05
    144c:	32 c0       	rjmp	.+100    	; 0x14b2 <EEPROM_readByte+0xae>
	    /*send the required address locations*/
		TWI_writeByte((uint8)(u16addr));
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <TWI_writeByte>
		if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1454:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <TWI_getStatus>
    1458:	88 32       	cpi	r24, 0x28	; 40
    145a:	11 f0       	breq	.+4      	; 0x1460 <EEPROM_readByte+0x5c>
		     return ERROR;
    145c:	1d 82       	std	Y+5, r1	; 0x05
    145e:	29 c0       	rjmp	.+82     	; 0x14b2 <EEPROM_readByte+0xae>
		/*transimate reapeated start bit*/
		TWI_start();
    1460:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <TWI_start>
		 if (TWI_getStatus() != TWI_REP_START)/*to ensure that start bit sended*/
    1464:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <TWI_getStatus>
    1468:	80 31       	cpi	r24, 0x10	; 16
    146a:	11 f0       	breq	.+4      	; 0x1470 <EEPROM_readByte+0x6c>
		        return ERROR;
    146c:	1d 82       	std	Y+5, r1	; 0x05
    146e:	21 c0       	rjmp	.+66     	; 0x14b2 <EEPROM_readByte+0xae>
		 /*send the divece address where we should take the (A10 A9 A8)
		  * from the memory locations
		  */
		   TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)|1));
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	80 70       	andi	r24, 0x00	; 0
    1476:	97 70       	andi	r25, 0x07	; 7
    1478:	88 0f       	add	r24, r24
    147a:	89 2f       	mov	r24, r25
    147c:	88 1f       	adc	r24, r24
    147e:	99 0b       	sbc	r25, r25
    1480:	91 95       	neg	r25
    1482:	81 6a       	ori	r24, 0xA1	; 161
    1484:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <TWI_writeByte>
		    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1488:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <TWI_getStatus>
    148c:	80 34       	cpi	r24, 0x40	; 64
    148e:	11 f0       	breq	.+4      	; 0x1494 <EEPROM_readByte+0x90>
		        return ERROR;
    1490:	1d 82       	std	Y+5, r1	; 0x05
    1492:	0f c0       	rjmp	.+30     	; 0x14b2 <EEPROM_readByte+0xae>

		    /* Read Byte from Memory without send ACK */
		    *u8data = TWI_readByteWithNACK();
    1494:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <TWI_readByteWithNACK>
    1498:	eb 81       	ldd	r30, Y+3	; 0x03
    149a:	fc 81       	ldd	r31, Y+4	; 0x04
    149c:	80 83       	st	Z, r24
		    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    149e:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <TWI_getStatus>
    14a2:	88 35       	cpi	r24, 0x58	; 88
    14a4:	11 f0       	breq	.+4      	; 0x14aa <EEPROM_readByte+0xa6>
		        return ERROR;
    14a6:	1d 82       	std	Y+5, r1	; 0x05
    14a8:	04 c0       	rjmp	.+8      	; 0x14b2 <EEPROM_readByte+0xae>

		    /* Send the Stop Bit */
		    TWI_stop();
    14aa:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <TWI_stop>

		    return SUCCESS;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	8d 83       	std	Y+5, r24	; 0x05
    14b2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <GPIO_setupPinDirection+0x6>
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <GPIO_setupPinDirection+0x8>
    14cc:	0f 92       	push	r0
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	6a 83       	std	Y+2, r22	; 0x02
    14d6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	88 30       	cpi	r24, 0x08	; 8
    14dc:	08 f0       	brcs	.+2      	; 0x14e0 <GPIO_setupPinDirection+0x1c>
    14de:	d5 c0       	rjmp	.+426    	; 0x168a <GPIO_setupPinDirection+0x1c6>
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	08 f0       	brcs	.+2      	; 0x14e8 <GPIO_setupPinDirection+0x24>
    14e6:	d1 c0       	rjmp	.+418    	; 0x168a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	3d 83       	std	Y+5, r19	; 0x05
    14f0:	2c 83       	std	Y+4, r18	; 0x04
    14f2:	8c 81       	ldd	r24, Y+4	; 0x04
    14f4:	9d 81       	ldd	r25, Y+5	; 0x05
    14f6:	81 30       	cpi	r24, 0x01	; 1
    14f8:	91 05       	cpc	r25, r1
    14fa:	09 f4       	brne	.+2      	; 0x14fe <GPIO_setupPinDirection+0x3a>
    14fc:	43 c0       	rjmp	.+134    	; 0x1584 <GPIO_setupPinDirection+0xc0>
    14fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1500:	3d 81       	ldd	r19, Y+5	; 0x05
    1502:	22 30       	cpi	r18, 0x02	; 2
    1504:	31 05       	cpc	r19, r1
    1506:	2c f4       	brge	.+10     	; 0x1512 <GPIO_setupPinDirection+0x4e>
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	9d 81       	ldd	r25, Y+5	; 0x05
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	71 f0       	breq	.+28     	; 0x152c <GPIO_setupPinDirection+0x68>
    1510:	bc c0       	rjmp	.+376    	; 0x168a <GPIO_setupPinDirection+0x1c6>
    1512:	2c 81       	ldd	r18, Y+4	; 0x04
    1514:	3d 81       	ldd	r19, Y+5	; 0x05
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	09 f4       	brne	.+2      	; 0x151e <GPIO_setupPinDirection+0x5a>
    151c:	5f c0       	rjmp	.+190    	; 0x15dc <GPIO_setupPinDirection+0x118>
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	83 30       	cpi	r24, 0x03	; 3
    1524:	91 05       	cpc	r25, r1
    1526:	09 f4       	brne	.+2      	; 0x152a <GPIO_setupPinDirection+0x66>
    1528:	85 c0       	rjmp	.+266    	; 0x1634 <GPIO_setupPinDirection+0x170>
    152a:	af c0       	rjmp	.+350    	; 0x168a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	a1 f4       	brne	.+40     	; 0x155a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1532:	aa e3       	ldi	r26, 0x3A	; 58
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	ea e3       	ldi	r30, 0x3A	; 58
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	48 2f       	mov	r20, r24
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 2e       	mov	r0, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <GPIO_setupPinDirection+0x8c>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	0a 94       	dec	r0
    1552:	e2 f7       	brpl	.-8      	; 0x154c <GPIO_setupPinDirection+0x88>
    1554:	84 2b       	or	r24, r20
    1556:	8c 93       	st	X, r24
    1558:	98 c0       	rjmp	.+304    	; 0x168a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    155a:	aa e3       	ldi	r26, 0x3A	; 58
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	ea e3       	ldi	r30, 0x3A	; 58
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	48 2f       	mov	r20, r24
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 2e       	mov	r0, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <GPIO_setupPinDirection+0xb4>
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	0a 94       	dec	r0
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <GPIO_setupPinDirection+0xb0>
    157c:	80 95       	com	r24
    157e:	84 23       	and	r24, r20
    1580:	8c 93       	st	X, r24
    1582:	83 c0       	rjmp	.+262    	; 0x168a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	a1 f4       	brne	.+40     	; 0x15b2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    158a:	a7 e3       	ldi	r26, 0x37	; 55
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e7 e3       	ldi	r30, 0x37	; 55
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <GPIO_setupPinDirection+0xe4>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <GPIO_setupPinDirection+0xe0>
    15ac:	84 2b       	or	r24, r20
    15ae:	8c 93       	st	X, r24
    15b0:	6c c0       	rjmp	.+216    	; 0x168a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    15b2:	a7 e3       	ldi	r26, 0x37	; 55
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e7 e3       	ldi	r30, 0x37	; 55
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	48 2f       	mov	r20, r24
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 2e       	mov	r0, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <GPIO_setupPinDirection+0x10c>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <GPIO_setupPinDirection+0x108>
    15d4:	80 95       	com	r24
    15d6:	84 23       	and	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	57 c0       	rjmp	.+174    	; 0x168a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	a1 f4       	brne	.+40     	; 0x160a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    15e2:	a4 e3       	ldi	r26, 0x34	; 52
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e4 e3       	ldi	r30, 0x34	; 52
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <GPIO_setupPinDirection+0x13c>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <GPIO_setupPinDirection+0x138>
    1604:	84 2b       	or	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	40 c0       	rjmp	.+128    	; 0x168a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    160a:	a4 e3       	ldi	r26, 0x34	; 52
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e4 e3       	ldi	r30, 0x34	; 52
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <GPIO_setupPinDirection+0x164>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <GPIO_setupPinDirection+0x160>
    162c:	80 95       	com	r24
    162e:	84 23       	and	r24, r20
    1630:	8c 93       	st	X, r24
    1632:	2b c0       	rjmp	.+86     	; 0x168a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	a1 f4       	brne	.+40     	; 0x1662 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    163a:	a1 e3       	ldi	r26, 0x31	; 49
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e1 e3       	ldi	r30, 0x31	; 49
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <GPIO_setupPinDirection+0x194>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <GPIO_setupPinDirection+0x190>
    165c:	84 2b       	or	r24, r20
    165e:	8c 93       	st	X, r24
    1660:	14 c0       	rjmp	.+40     	; 0x168a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1662:	a1 e3       	ldi	r26, 0x31	; 49
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e1 e3       	ldi	r30, 0x31	; 49
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	48 2f       	mov	r20, r24
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 2e       	mov	r0, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <GPIO_setupPinDirection+0x1bc>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <GPIO_setupPinDirection+0x1b8>
    1684:	80 95       	com	r24
    1686:	84 23       	and	r24, r20
    1688:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <GPIO_writePin+0x6>
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <GPIO_writePin+0x8>
    16a2:	0f 92       	push	r0
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	6a 83       	std	Y+2, r22	; 0x02
    16ac:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	88 30       	cpi	r24, 0x08	; 8
    16b2:	08 f0       	brcs	.+2      	; 0x16b6 <GPIO_writePin+0x1c>
    16b4:	d5 c0       	rjmp	.+426    	; 0x1860 <GPIO_writePin+0x1c6>
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	84 30       	cpi	r24, 0x04	; 4
    16ba:	08 f0       	brcs	.+2      	; 0x16be <GPIO_writePin+0x24>
    16bc:	d1 c0       	rjmp	.+418    	; 0x1860 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	3d 83       	std	Y+5, r19	; 0x05
    16c6:	2c 83       	std	Y+4, r18	; 0x04
    16c8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ca:	9d 81       	ldd	r25, Y+5	; 0x05
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	91 05       	cpc	r25, r1
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <GPIO_writePin+0x3a>
    16d2:	43 c0       	rjmp	.+134    	; 0x175a <GPIO_writePin+0xc0>
    16d4:	2c 81       	ldd	r18, Y+4	; 0x04
    16d6:	3d 81       	ldd	r19, Y+5	; 0x05
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	2c f4       	brge	.+10     	; 0x16e8 <GPIO_writePin+0x4e>
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	9d 81       	ldd	r25, Y+5	; 0x05
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	71 f0       	breq	.+28     	; 0x1702 <GPIO_writePin+0x68>
    16e6:	bc c0       	rjmp	.+376    	; 0x1860 <GPIO_writePin+0x1c6>
    16e8:	2c 81       	ldd	r18, Y+4	; 0x04
    16ea:	3d 81       	ldd	r19, Y+5	; 0x05
    16ec:	22 30       	cpi	r18, 0x02	; 2
    16ee:	31 05       	cpc	r19, r1
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <GPIO_writePin+0x5a>
    16f2:	5f c0       	rjmp	.+190    	; 0x17b2 <GPIO_writePin+0x118>
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	9d 81       	ldd	r25, Y+5	; 0x05
    16f8:	83 30       	cpi	r24, 0x03	; 3
    16fa:	91 05       	cpc	r25, r1
    16fc:	09 f4       	brne	.+2      	; 0x1700 <GPIO_writePin+0x66>
    16fe:	85 c0       	rjmp	.+266    	; 0x180a <GPIO_writePin+0x170>
    1700:	af c0       	rjmp	.+350    	; 0x1860 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	a1 f4       	brne	.+40     	; 0x1730 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1708:	ab e3       	ldi	r26, 0x3B	; 59
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	eb e3       	ldi	r30, 0x3B	; 59
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	48 2f       	mov	r20, r24
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	02 2e       	mov	r0, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <GPIO_writePin+0x8c>
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	0a 94       	dec	r0
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <GPIO_writePin+0x88>
    172a:	84 2b       	or	r24, r20
    172c:	8c 93       	st	X, r24
    172e:	98 c0       	rjmp	.+304    	; 0x1860 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1730:	ab e3       	ldi	r26, 0x3B	; 59
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	eb e3       	ldi	r30, 0x3B	; 59
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	48 2f       	mov	r20, r24
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 2e       	mov	r0, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <GPIO_writePin+0xb4>
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	0a 94       	dec	r0
    1750:	e2 f7       	brpl	.-8      	; 0x174a <GPIO_writePin+0xb0>
    1752:	80 95       	com	r24
    1754:	84 23       	and	r24, r20
    1756:	8c 93       	st	X, r24
    1758:	83 c0       	rjmp	.+262    	; 0x1860 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	a1 f4       	brne	.+40     	; 0x1788 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1760:	a8 e3       	ldi	r26, 0x38	; 56
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e8 e3       	ldi	r30, 0x38	; 56
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 2e       	mov	r0, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <GPIO_writePin+0xe4>
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	0a 94       	dec	r0
    1780:	e2 f7       	brpl	.-8      	; 0x177a <GPIO_writePin+0xe0>
    1782:	84 2b       	or	r24, r20
    1784:	8c 93       	st	X, r24
    1786:	6c c0       	rjmp	.+216    	; 0x1860 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1788:	a8 e3       	ldi	r26, 0x38	; 56
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e8 e3       	ldi	r30, 0x38	; 56
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	48 2f       	mov	r20, r24
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	02 2e       	mov	r0, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <GPIO_writePin+0x10c>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	0a 94       	dec	r0
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <GPIO_writePin+0x108>
    17aa:	80 95       	com	r24
    17ac:	84 23       	and	r24, r20
    17ae:	8c 93       	st	X, r24
    17b0:	57 c0       	rjmp	.+174    	; 0x1860 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	a1 f4       	brne	.+40     	; 0x17e0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    17b8:	a5 e3       	ldi	r26, 0x35	; 53
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e5 e3       	ldi	r30, 0x35	; 53
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 2e       	mov	r0, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <GPIO_writePin+0x13c>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	0a 94       	dec	r0
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <GPIO_writePin+0x138>
    17da:	84 2b       	or	r24, r20
    17dc:	8c 93       	st	X, r24
    17de:	40 c0       	rjmp	.+128    	; 0x1860 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    17e0:	a5 e3       	ldi	r26, 0x35	; 53
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e5 e3       	ldi	r30, 0x35	; 53
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	48 2f       	mov	r20, r24
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 2e       	mov	r0, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <GPIO_writePin+0x164>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	0a 94       	dec	r0
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <GPIO_writePin+0x160>
    1802:	80 95       	com	r24
    1804:	84 23       	and	r24, r20
    1806:	8c 93       	st	X, r24
    1808:	2b c0       	rjmp	.+86     	; 0x1860 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	a1 f4       	brne	.+40     	; 0x1838 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1810:	a2 e3       	ldi	r26, 0x32	; 50
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e2 e3       	ldi	r30, 0x32	; 50
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <GPIO_writePin+0x194>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <GPIO_writePin+0x190>
    1832:	84 2b       	or	r24, r20
    1834:	8c 93       	st	X, r24
    1836:	14 c0       	rjmp	.+40     	; 0x1860 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1838:	a2 e3       	ldi	r26, 0x32	; 50
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e2 e3       	ldi	r30, 0x32	; 50
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	48 2f       	mov	r20, r24
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 2e       	mov	r0, r18
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <GPIO_writePin+0x1bc>
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	0a 94       	dec	r0
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <GPIO_writePin+0x1b8>
    185a:	80 95       	com	r24
    185c:	84 23       	and	r24, r20
    185e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	00 d0       	rcall	.+0      	; 0x1876 <GPIO_readPin+0x6>
    1876:	00 d0       	rcall	.+0      	; 0x1878 <GPIO_readPin+0x8>
    1878:	0f 92       	push	r0
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	8a 83       	std	Y+2, r24	; 0x02
    1880:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1882:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	88 30       	cpi	r24, 0x08	; 8
    1888:	08 f0       	brcs	.+2      	; 0x188c <GPIO_readPin+0x1c>
    188a:	84 c0       	rjmp	.+264    	; 0x1994 <GPIO_readPin+0x124>
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	84 30       	cpi	r24, 0x04	; 4
    1890:	08 f0       	brcs	.+2      	; 0x1894 <GPIO_readPin+0x24>
    1892:	80 c0       	rjmp	.+256    	; 0x1994 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	3d 83       	std	Y+5, r19	; 0x05
    189c:	2c 83       	std	Y+4, r18	; 0x04
    189e:	4c 81       	ldd	r20, Y+4	; 0x04
    18a0:	5d 81       	ldd	r21, Y+5	; 0x05
    18a2:	41 30       	cpi	r20, 0x01	; 1
    18a4:	51 05       	cpc	r21, r1
    18a6:	79 f1       	breq	.+94     	; 0x1906 <GPIO_readPin+0x96>
    18a8:	8c 81       	ldd	r24, Y+4	; 0x04
    18aa:	9d 81       	ldd	r25, Y+5	; 0x05
    18ac:	82 30       	cpi	r24, 0x02	; 2
    18ae:	91 05       	cpc	r25, r1
    18b0:	34 f4       	brge	.+12     	; 0x18be <GPIO_readPin+0x4e>
    18b2:	2c 81       	ldd	r18, Y+4	; 0x04
    18b4:	3d 81       	ldd	r19, Y+5	; 0x05
    18b6:	21 15       	cp	r18, r1
    18b8:	31 05       	cpc	r19, r1
    18ba:	69 f0       	breq	.+26     	; 0x18d6 <GPIO_readPin+0x66>
    18bc:	6b c0       	rjmp	.+214    	; 0x1994 <GPIO_readPin+0x124>
    18be:	4c 81       	ldd	r20, Y+4	; 0x04
    18c0:	5d 81       	ldd	r21, Y+5	; 0x05
    18c2:	42 30       	cpi	r20, 0x02	; 2
    18c4:	51 05       	cpc	r21, r1
    18c6:	b9 f1       	breq	.+110    	; 0x1936 <GPIO_readPin+0xc6>
    18c8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ca:	9d 81       	ldd	r25, Y+5	; 0x05
    18cc:	83 30       	cpi	r24, 0x03	; 3
    18ce:	91 05       	cpc	r25, r1
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <GPIO_readPin+0x64>
    18d2:	49 c0       	rjmp	.+146    	; 0x1966 <GPIO_readPin+0xf6>
    18d4:	5f c0       	rjmp	.+190    	; 0x1994 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    18d6:	e9 e3       	ldi	r30, 0x39	; 57
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	a9 01       	movw	r20, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <GPIO_readPin+0x7e>
    18ea:	55 95       	asr	r21
    18ec:	47 95       	ror	r20
    18ee:	8a 95       	dec	r24
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <GPIO_readPin+0x7a>
    18f2:	ca 01       	movw	r24, r20
    18f4:	81 70       	andi	r24, 0x01	; 1
    18f6:	90 70       	andi	r25, 0x00	; 0
    18f8:	88 23       	and	r24, r24
    18fa:	19 f0       	breq	.+6      	; 0x1902 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	49 c0       	rjmp	.+146    	; 0x1994 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1902:	19 82       	std	Y+1, r1	; 0x01
    1904:	47 c0       	rjmp	.+142    	; 0x1994 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1906:	e6 e3       	ldi	r30, 0x36	; 54
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a9 01       	movw	r20, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <GPIO_readPin+0xae>
    191a:	55 95       	asr	r21
    191c:	47 95       	ror	r20
    191e:	8a 95       	dec	r24
    1920:	e2 f7       	brpl	.-8      	; 0x191a <GPIO_readPin+0xaa>
    1922:	ca 01       	movw	r24, r20
    1924:	81 70       	andi	r24, 0x01	; 1
    1926:	90 70       	andi	r25, 0x00	; 0
    1928:	88 23       	and	r24, r24
    192a:	19 f0       	breq	.+6      	; 0x1932 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	31 c0       	rjmp	.+98     	; 0x1994 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1932:	19 82       	std	Y+1, r1	; 0x01
    1934:	2f c0       	rjmp	.+94     	; 0x1994 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1936:	e3 e3       	ldi	r30, 0x33	; 51
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	a9 01       	movw	r20, r18
    1948:	02 c0       	rjmp	.+4      	; 0x194e <GPIO_readPin+0xde>
    194a:	55 95       	asr	r21
    194c:	47 95       	ror	r20
    194e:	8a 95       	dec	r24
    1950:	e2 f7       	brpl	.-8      	; 0x194a <GPIO_readPin+0xda>
    1952:	ca 01       	movw	r24, r20
    1954:	81 70       	andi	r24, 0x01	; 1
    1956:	90 70       	andi	r25, 0x00	; 0
    1958:	88 23       	and	r24, r24
    195a:	19 f0       	breq	.+6      	; 0x1962 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	19 c0       	rjmp	.+50     	; 0x1994 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1962:	19 82       	std	Y+1, r1	; 0x01
    1964:	17 c0       	rjmp	.+46     	; 0x1994 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1966:	e0 e3       	ldi	r30, 0x30	; 48
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a9 01       	movw	r20, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <GPIO_readPin+0x10e>
    197a:	55 95       	asr	r21
    197c:	47 95       	ror	r20
    197e:	8a 95       	dec	r24
    1980:	e2 f7       	brpl	.-8      	; 0x197a <GPIO_readPin+0x10a>
    1982:	ca 01       	movw	r24, r20
    1984:	81 70       	andi	r24, 0x01	; 1
    1986:	90 70       	andi	r25, 0x00	; 0
    1988:	88 23       	and	r24, r24
    198a:	19 f0       	breq	.+6      	; 0x1992 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	01 c0       	rjmp	.+2      	; 0x1994 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1992:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1994:	89 81       	ldd	r24, Y+1	; 0x01
}
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <GPIO_setupPortDirection+0x6>
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <GPIO_setupPortDirection+0x8>
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	84 30       	cpi	r24, 0x04	; 4
    19ba:	90 f5       	brcc	.+100    	; 0x1a20 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	3c 83       	std	Y+4, r19	; 0x04
    19c4:	2b 83       	std	Y+3, r18	; 0x03
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ca:	81 30       	cpi	r24, 0x01	; 1
    19cc:	91 05       	cpc	r25, r1
    19ce:	d1 f0       	breq	.+52     	; 0x1a04 <GPIO_setupPortDirection+0x5e>
    19d0:	2b 81       	ldd	r18, Y+3	; 0x03
    19d2:	3c 81       	ldd	r19, Y+4	; 0x04
    19d4:	22 30       	cpi	r18, 0x02	; 2
    19d6:	31 05       	cpc	r19, r1
    19d8:	2c f4       	brge	.+10     	; 0x19e4 <GPIO_setupPortDirection+0x3e>
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	61 f0       	breq	.+24     	; 0x19fa <GPIO_setupPortDirection+0x54>
    19e2:	1e c0       	rjmp	.+60     	; 0x1a20 <GPIO_setupPortDirection+0x7a>
    19e4:	2b 81       	ldd	r18, Y+3	; 0x03
    19e6:	3c 81       	ldd	r19, Y+4	; 0x04
    19e8:	22 30       	cpi	r18, 0x02	; 2
    19ea:	31 05       	cpc	r19, r1
    19ec:	81 f0       	breq	.+32     	; 0x1a0e <GPIO_setupPortDirection+0x68>
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	9c 81       	ldd	r25, Y+4	; 0x04
    19f2:	83 30       	cpi	r24, 0x03	; 3
    19f4:	91 05       	cpc	r25, r1
    19f6:	81 f0       	breq	.+32     	; 0x1a18 <GPIO_setupPortDirection+0x72>
    19f8:	13 c0       	rjmp	.+38     	; 0x1a20 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    19fa:	ea e3       	ldi	r30, 0x3A	; 58
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	80 83       	st	Z, r24
    1a02:	0e c0       	rjmp	.+28     	; 0x1a20 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a04:	e7 e3       	ldi	r30, 0x37	; 55
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	80 83       	st	Z, r24
    1a0c:	09 c0       	rjmp	.+18     	; 0x1a20 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a0e:	e4 e3       	ldi	r30, 0x34	; 52
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	80 83       	st	Z, r24
    1a16:	04 c0       	rjmp	.+8      	; 0x1a20 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a18:	e1 e3       	ldi	r30, 0x31	; 49
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <GPIO_writePort+0x6>
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <GPIO_writePort+0x8>
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	89 83       	std	Y+1, r24	; 0x01
    1a3c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	84 30       	cpi	r24, 0x04	; 4
    1a42:	90 f5       	brcc	.+100    	; 0x1aa8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	3c 83       	std	Y+4, r19	; 0x04
    1a4c:	2b 83       	std	Y+3, r18	; 0x03
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	9c 81       	ldd	r25, Y+4	; 0x04
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	91 05       	cpc	r25, r1
    1a56:	d1 f0       	breq	.+52     	; 0x1a8c <GPIO_writePort+0x5e>
    1a58:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a5c:	22 30       	cpi	r18, 0x02	; 2
    1a5e:	31 05       	cpc	r19, r1
    1a60:	2c f4       	brge	.+10     	; 0x1a6c <GPIO_writePort+0x3e>
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	61 f0       	breq	.+24     	; 0x1a82 <GPIO_writePort+0x54>
    1a6a:	1e c0       	rjmp	.+60     	; 0x1aa8 <GPIO_writePort+0x7a>
    1a6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a70:	22 30       	cpi	r18, 0x02	; 2
    1a72:	31 05       	cpc	r19, r1
    1a74:	81 f0       	breq	.+32     	; 0x1a96 <GPIO_writePort+0x68>
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7a:	83 30       	cpi	r24, 0x03	; 3
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	81 f0       	breq	.+32     	; 0x1aa0 <GPIO_writePort+0x72>
    1a80:	13 c0       	rjmp	.+38     	; 0x1aa8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a82:	eb e3       	ldi	r30, 0x3B	; 59
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	80 83       	st	Z, r24
    1a8a:	0e c0       	rjmp	.+28     	; 0x1aa8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a8c:	e8 e3       	ldi	r30, 0x38	; 56
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	80 83       	st	Z, r24
    1a94:	09 c0       	rjmp	.+18     	; 0x1aa8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a96:	e5 e3       	ldi	r30, 0x35	; 53
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	80 83       	st	Z, r24
    1a9e:	04 c0       	rjmp	.+8      	; 0x1aa8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1aa0:	e2 e3       	ldi	r30, 0x32	; 50
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <GPIO_readPort+0x6>
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <GPIO_readPort+0x8>
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1ac4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	84 30       	cpi	r24, 0x04	; 4
    1aca:	90 f5       	brcc	.+100    	; 0x1b30 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	3c 83       	std	Y+4, r19	; 0x04
    1ad4:	2b 83       	std	Y+3, r18	; 0x03
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	91 05       	cpc	r25, r1
    1ade:	d1 f0       	breq	.+52     	; 0x1b14 <GPIO_readPort+0x5e>
    1ae0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae4:	22 30       	cpi	r18, 0x02	; 2
    1ae6:	31 05       	cpc	r19, r1
    1ae8:	2c f4       	brge	.+10     	; 0x1af4 <GPIO_readPort+0x3e>
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	9c 81       	ldd	r25, Y+4	; 0x04
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	61 f0       	breq	.+24     	; 0x1b0a <GPIO_readPort+0x54>
    1af2:	1e c0       	rjmp	.+60     	; 0x1b30 <GPIO_readPort+0x7a>
    1af4:	2b 81       	ldd	r18, Y+3	; 0x03
    1af6:	3c 81       	ldd	r19, Y+4	; 0x04
    1af8:	22 30       	cpi	r18, 0x02	; 2
    1afa:	31 05       	cpc	r19, r1
    1afc:	81 f0       	breq	.+32     	; 0x1b1e <GPIO_readPort+0x68>
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	9c 81       	ldd	r25, Y+4	; 0x04
    1b02:	83 30       	cpi	r24, 0x03	; 3
    1b04:	91 05       	cpc	r25, r1
    1b06:	81 f0       	breq	.+32     	; 0x1b28 <GPIO_readPort+0x72>
    1b08:	13 c0       	rjmp	.+38     	; 0x1b30 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1b0a:	e9 e3       	ldi	r30, 0x39	; 57
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	0e c0       	rjmp	.+28     	; 0x1b30 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1b14:	e6 e3       	ldi	r30, 0x36	; 54
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	09 c0       	rjmp	.+18     	; 0x1b30 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b1e:	e3 e3       	ldi	r30, 0x33	; 51
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	04 c0       	rjmp	.+8      	; 0x1b30 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1b28:	e0 e3       	ldi	r30, 0x30	; 48
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <TWI_init>:
 *
 * Description:
 *
 * to initialize the I2C Model with the required configuration
 */
void TWI_init(const TWI_ConfigType *Config_Ptr){
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <TWI_init+0x6>
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	9a 83       	std	Y+2, r25	; 0x02
    1b4c:	89 83       	std	Y+1, r24	; 0x01
	*/

/* With Dynamic Configurations as required */

	/*to use the required rate*/
	TWBR=Config_Ptr->bit_rate;
    1b4e:	a0 e2       	ldi	r26, 0x20	; 32
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e9 81       	ldd	r30, Y+1	; 0x01
    1b54:	fa 81       	ldd	r31, Y+2	; 0x02
    1b56:	81 81       	ldd	r24, Z+1	; 0x01
    1b58:	8c 93       	st	X, r24
	TWSR=0x00;        /*No Prescalar*/
    1b5a:	e1 e2       	ldi	r30, 0x21	; 33
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	10 82       	st	Z, r1
	/*to use the required Rate*/
	TWAR=Config_Ptr->address;
    1b60:	a2 e2       	ldi	r26, 0x22	; 34
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e9 81       	ldd	r30, Y+1	; 0x01
    1b66:	fa 81       	ldd	r31, Y+2	; 0x02
    1b68:	80 81       	ld	r24, Z
    1b6a:	8c 93       	st	X, r24
	TWCR=(1<<TWEN);   /*to enables TWI operation*/
    1b6c:	e6 e5       	ldi	r30, 0x56	; 86
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	84 e0       	ldi	r24, 0x04	; 4
    1b72:	80 83       	st	Z, r24
}
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <TWI_start>:
 *
 * Description:
 *
 * to start the I2C Model
 */
void TWI_start(void){
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
	/*
	 * TWSTA=1-->to active start bit
	 * TWEN=1--->to enables TWI operation
	 * TWINT=1--->to clear the interrupt flag at the beggining
	 */
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1b86:	e6 e5       	ldi	r30, 0x56	; 86
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	84 ea       	ldi	r24, 0xA4	; 164
    1b8c:	80 83       	st	Z, r24
	/*wait tile the start condition is transmitted successfully*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1b8e:	e6 e5       	ldi	r30, 0x56	; 86
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	88 23       	and	r24, r24
    1b96:	dc f7       	brge	.-10     	; 0x1b8e <TWI_start+0x10>
}
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <TWI_stop>:
 *
 * Description:
 *
 * to stop the I2C Model
 */
void TWI_stop(void){
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * TWSTO=1-->to active Stop bit
	 * TWEN=1--->to enables TWI operation
	 * TWINT=1--->to clear the interrupt flag at the beggining
	 */
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    1ba6:	e6 e5       	ldi	r30, 0x56	; 86
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	84 e9       	ldi	r24, 0x94	; 148
    1bac:	80 83       	st	Z, r24
}
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <TWI_writeByte>:
 *
 * Description:
 *
 * to the master write byte to the slave by the I2C Model
 */
void TWI_writeByte(uint8 data){
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	0f 92       	push	r0
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	89 83       	std	Y+1, r24	; 0x01

	/*put the data to the required register*/
	TWDR=data;
    1bc0:	e3 e2       	ldi	r30, 0x23	; 35
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	80 83       	st	Z, r24
	/*
	 * TWEN=1--->to enables TWI operation
	 * TWINT=1--->to clear the interrupt flag at the beggining
	 */
	TWCR=(1<<TWINT)|(1<<TWEN);
    1bc8:	e6 e5       	ldi	r30, 0x56	; 86
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	84 e8       	ldi	r24, 0x84	; 132
    1bce:	80 83       	st	Z, r24

	/*polling to ensure that data is stored successfuly*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1bd0:	e6 e5       	ldi	r30, 0x56	; 86
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	88 23       	and	r24, r24
    1bd8:	dc f7       	brge	.-10     	; 0x1bd0 <TWI_writeByte+0x1c>
}
    1bda:	0f 90       	pop	r0
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <TWI_readByteWithACK>:
 *
 * Description:
 *
 * to the master read byte from the slave with ACK by the I2C Model
 */
uint8 TWI_readByteWithACK(void){
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * TWEN=1--->to enables TWI operation
	 * TWINT=1--->to clear the interrupt flag at the beggining
	 * TWEA=1--->to enable the ACK bit after recieving or reading
	 */
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1bea:	e6 e5       	ldi	r30, 0x56	; 86
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	84 ec       	ldi	r24, 0xC4	; 196
    1bf0:	80 83       	st	Z, r24
	/*polling to ensure that is the required data*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1bf2:	e6 e5       	ldi	r30, 0x56	; 86
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	88 23       	and	r24, r24
    1bfa:	dc f7       	brge	.-10     	; 0x1bf2 <TWI_readByteWithACK+0x10>
	/*return the required data*/
	return TWDR;
    1bfc:	e3 e2       	ldi	r30, 0x23	; 35
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
}
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <TWI_readByteWithNACK>:
 *
 * Description:
 *
 * to the master read byte from the slave with NACK by the I2C Model
 */
uint8 TWI_readByteWithNACK(void){
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * TWEN=1--->to enables TWI operation
	 * TWINT=1--->to clear the interrupt flag at the beggining
	 * TWEA=0--->to enable the NACK bit after recieving or reading
	 */
	TWCR=(1<<TWINT)|(1<<TWEN);
    1c10:	e6 e5       	ldi	r30, 0x56	; 86
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	84 e8       	ldi	r24, 0x84	; 132
    1c16:	80 83       	st	Z, r24
	/*polling to ensure that is the required data*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1c18:	e6 e5       	ldi	r30, 0x56	; 86
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	88 23       	and	r24, r24
    1c20:	dc f7       	brge	.-10     	; 0x1c18 <TWI_readByteWithNACK+0x10>
	/*return the required data*/
	return TWDR;
    1c22:	e3 e2       	ldi	r30, 0x23	; 35
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
}
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <TWI_getStatus>:
 *
 * Description:
 *
 * to get the status
 */
uint8 TWI_getStatus(void){
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	0f 92       	push	r0
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
	uint8 status_result;
	status_result=(TWSR & 0xF8);
    1c38:	e1 e2       	ldi	r30, 0x21	; 33
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	88 7f       	andi	r24, 0xF8	; 248
    1c40:	89 83       	std	Y+1, r24	; 0x01
	return status_result;
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c44:	0f 90       	pop	r0
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <PWM_Timer0_Start>:

/*
 * Description:-
 * setup the the PWM mode with required configuration
 */
void PWM_Timer0_Start(uint8 duty_cycle){
    1c4c:	0f 93       	push	r16
    1c4e:	1f 93       	push	r17
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	0f 92       	push	r0
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;           /*init value for timer0*/
    1c5c:	e2 e5       	ldi	r30, 0x52	; 82
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	10 82       	st	Z, r1
	/*compare value for timer0*/
	OCR0=(float32)duty_cycle * (float32)2.56;  /*to get the value the present the duty cycle percentage*/
    1c62:	0c e5       	ldi	r16, 0x5C	; 92
    1c64:	10 e0       	ldi	r17, 0x00	; 0
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	88 2f       	mov	r24, r24
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	a0 e0       	ldi	r26, 0x00	; 0
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	bc 01       	movw	r22, r24
    1c7e:	cd 01       	movw	r24, r26
    1c80:	2a e0       	ldi	r18, 0x0A	; 10
    1c82:	37 ed       	ldi	r19, 0xD7	; 215
    1c84:	43 e2       	ldi	r20, 0x23	; 35
    1c86:	50 e4       	ldi	r21, 0x40	; 64
    1c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	bc 01       	movw	r22, r24
    1c92:	cd 01       	movw	r24, r26
    1c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	f8 01       	movw	r30, r16
    1c9e:	80 83       	st	Z, r24
	/*set  the  OC0 as Output pin*/
	GPIO_setupPinDirection(PWM_PORT_ID ,PWM_PIN_ID,PIN_OUTPUT);
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	63 e0       	ldi	r22, 0x03	; 3
    1ca4:	41 e0       	ldi	r20, 0x01	; 1
    1ca6:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <GPIO_setupPinDirection>
	/*setup the configuration that response for pwm_Timer0*/
#if(PRESCALAR==8)
	TCCR0=(1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1caa:	e3 e5       	ldi	r30, 0x53	; 83
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	8a e6       	ldi	r24, 0x6A	; 106
    1cb0:	80 83       	st	Z, r24
#elif(PRESCALAR==256)
	TCCR0=(1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS02);
#elif(PRESCALAR==1024)
	TCCR0=(1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS02)|(1<<CS00);
#endif
}
    1cb2:	0f 90       	pop	r0
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	1f 91       	pop	r17
    1cba:	0f 91       	pop	r16
    1cbc:	08 95       	ret

00001cbe <__vector_7>:
 * Description:
 * Call the Function that exist in Applications so I
 * do not need to Change anything in this Driver
 */
ISR(TIMER1_COMPA_vect)
{
    1cbe:	1f 92       	push	r1
    1cc0:	0f 92       	push	r0
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	0f 92       	push	r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	2f 93       	push	r18
    1cca:	3f 93       	push	r19
    1ccc:	4f 93       	push	r20
    1cce:	5f 93       	push	r21
    1cd0:	6f 93       	push	r22
    1cd2:	7f 93       	push	r23
    1cd4:	8f 93       	push	r24
    1cd6:	9f 93       	push	r25
    1cd8:	af 93       	push	r26
    1cda:	bf 93       	push	r27
    1cdc:	ef 93       	push	r30
    1cde:	ff 93       	push	r31
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1ce8:	80 91 79 01 	lds	r24, 0x0179
    1cec:	90 91 7a 01 	lds	r25, 0x017A
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	29 f0       	breq	.+10     	; 0x1cfe <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    1cf4:	e0 91 79 01 	lds	r30, 0x0179
    1cf8:	f0 91 7a 01 	lds	r31, 0x017A
    1cfc:	09 95       	icall
	}
}
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	ff 91       	pop	r31
    1d04:	ef 91       	pop	r30
    1d06:	bf 91       	pop	r27
    1d08:	af 91       	pop	r26
    1d0a:	9f 91       	pop	r25
    1d0c:	8f 91       	pop	r24
    1d0e:	7f 91       	pop	r23
    1d10:	6f 91       	pop	r22
    1d12:	5f 91       	pop	r21
    1d14:	4f 91       	pop	r20
    1d16:	3f 91       	pop	r19
    1d18:	2f 91       	pop	r18
    1d1a:	0f 90       	pop	r0
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	0f 90       	pop	r0
    1d20:	1f 90       	pop	r1
    1d22:	18 95       	reti

00001d24 <__vector_9>:
 * Description:
 * Call the Function that exist in Applications so I
 * do not need to Change anything in this Driver
 */
ISR(TIMER1_OVF_vect)
{
    1d24:	1f 92       	push	r1
    1d26:	0f 92       	push	r0
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	0f 92       	push	r0
    1d2c:	11 24       	eor	r1, r1
    1d2e:	2f 93       	push	r18
    1d30:	3f 93       	push	r19
    1d32:	4f 93       	push	r20
    1d34:	5f 93       	push	r21
    1d36:	6f 93       	push	r22
    1d38:	7f 93       	push	r23
    1d3a:	8f 93       	push	r24
    1d3c:	9f 93       	push	r25
    1d3e:	af 93       	push	r26
    1d40:	bf 93       	push	r27
    1d42:	ef 93       	push	r30
    1d44:	ff 93       	push	r31
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1d4e:	80 91 79 01 	lds	r24, 0x0179
    1d52:	90 91 7a 01 	lds	r25, 0x017A
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	29 f0       	breq	.+10     	; 0x1d64 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    1d5a:	e0 91 79 01 	lds	r30, 0x0179
    1d5e:	f0 91 7a 01 	lds	r31, 0x017A
    1d62:	09 95       	icall
	}
}
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	ff 91       	pop	r31
    1d6a:	ef 91       	pop	r30
    1d6c:	bf 91       	pop	r27
    1d6e:	af 91       	pop	r26
    1d70:	9f 91       	pop	r25
    1d72:	8f 91       	pop	r24
    1d74:	7f 91       	pop	r23
    1d76:	6f 91       	pop	r22
    1d78:	5f 91       	pop	r21
    1d7a:	4f 91       	pop	r20
    1d7c:	3f 91       	pop	r19
    1d7e:	2f 91       	pop	r18
    1d80:	0f 90       	pop	r0
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	0f 90       	pop	r0
    1d86:	1f 90       	pop	r1
    1d88:	18 95       	reti

00001d8a <Timer1_init>:
 * Description:
 *
 * to initialize the Timer1 in Normal mode or compare mode
 */

void Timer1_init(const Timer1_ConfigType *Config_ptr){
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	00 d0       	rcall	.+0      	; 0x1d90 <Timer1_init+0x6>
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	89 83       	std	Y+1, r24	; 0x01

    if(Config_ptr->mode==NORMAL_MODE){
    1d98:	e9 81       	ldd	r30, Y+1	; 0x01
    1d9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d9c:	84 81       	ldd	r24, Z+4	; 0x04
    1d9e:	88 23       	and	r24, r24
    1da0:	d9 f4       	brne	.+54     	; 0x1dd8 <Timer1_init+0x4e>
	    /*set the initial value*/
		TCNT1=Config_ptr->initial_value;
    1da2:	ac e4       	ldi	r26, 0x4C	; 76
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e9 81       	ldd	r30, Y+1	; 0x01
    1da8:	fa 81       	ldd	r31, Y+2	; 0x02
    1daa:	80 81       	ld	r24, Z
    1dac:	91 81       	ldd	r25, Z+1	; 0x01
    1dae:	11 96       	adiw	r26, 0x01	; 1
    1db0:	9c 93       	st	X, r25
    1db2:	8e 93       	st	-X, r24
		/*as I don't want generate PWM Signal*/
		TCCR1A=(1<<FOC1A)|(1<<FOC1B);
    1db4:	ef e4       	ldi	r30, 0x4F	; 79
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	8c e0       	ldi	r24, 0x0C	; 12
    1dba:	80 83       	st	Z, r24
		/*to active the Timer1_Overflow Interrupt*/
		TIMSK|=(1<<TOIE1);
    1dbc:	a9 e5       	ldi	r26, 0x59	; 89
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e9 e5       	ldi	r30, 0x59	; 89
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	84 60       	ori	r24, 0x04	; 4
    1dc8:	8c 93       	st	X, r24
		/*to set the required prescalar*/
		TCCR1B=(Config_ptr->prescalar);
    1dca:	ae e4       	ldi	r26, 0x4E	; 78
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd2:	85 81       	ldd	r24, Z+5	; 0x05
    1dd4:	8c 93       	st	X, r24
    1dd6:	29 c0       	rjmp	.+82     	; 0x1e2a <Timer1_init+0xa0>
    }
   else if(Config_ptr->mode==COMPARE_MODE){
    1dd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dda:	fa 81       	ldd	r31, Y+2	; 0x02
    1ddc:	84 81       	ldd	r24, Z+4	; 0x04
    1dde:	81 30       	cpi	r24, 0x01	; 1
    1de0:	21 f5       	brne	.+72     	; 0x1e2a <Timer1_init+0xa0>
    	/*set the initial value*/
		TCNT1=Config_ptr->initial_value;
    1de2:	ac e4       	ldi	r26, 0x4C	; 76
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e9 81       	ldd	r30, Y+1	; 0x01
    1de8:	fa 81       	ldd	r31, Y+2	; 0x02
    1dea:	80 81       	ld	r24, Z
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	11 96       	adiw	r26, 0x01	; 1
    1df0:	9c 93       	st	X, r25
    1df2:	8e 93       	st	-X, r24
		/*set the compare value*/
		OCR1A=Config_ptr->compare_value;
    1df4:	aa e4       	ldi	r26, 0x4A	; 74
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfa:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfc:	82 81       	ldd	r24, Z+2	; 0x02
    1dfe:	93 81       	ldd	r25, Z+3	; 0x03
    1e00:	11 96       	adiw	r26, 0x01	; 1
    1e02:	9c 93       	st	X, r25
    1e04:	8e 93       	st	-X, r24
		/*as I don't want generate PWM Signal*/
		TCCR1A=(1<<FOC1A)|(1<<FOC1B);
    1e06:	ef e4       	ldi	r30, 0x4F	; 79
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	8c e0       	ldi	r24, 0x0C	; 12
    1e0c:	80 83       	st	Z, r24
		/*to active the Timer1_COMPARE Interrupt*/
		TIMSK|=(1<<OCIE1A);
    1e0e:	a9 e5       	ldi	r26, 0x59	; 89
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e9 e5       	ldi	r30, 0x59	; 89
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	80 61       	ori	r24, 0x10	; 16
    1e1a:	8c 93       	st	X, r24
		/*to set the required prescalar*/
		TCCR1B=(1<<WGM12)|(Config_ptr->prescalar);
    1e1c:	ae e4       	ldi	r26, 0x4E	; 78
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e9 81       	ldd	r30, Y+1	; 0x01
    1e22:	fa 81       	ldd	r31, Y+2	; 0x02
    1e24:	85 81       	ldd	r24, Z+5	; 0x05
    1e26:	88 60       	ori	r24, 0x08	; 8
    1e28:	8c 93       	st	X, r24
   }
}
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <Timer1_deInit>:
 *
 * Description:
 *
 * to disable the Timer1( stop the Timer1 from counting)
 */
void Timer1_deInit(void){
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
	/*Close the Clock Source to Stop The Timer*/
	TCCR1B=0;
    1e3c:	ee e4       	ldi	r30, 0x4E	; 78
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	10 82       	st	Z, r1
}
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <Timer1_setCallBack>:
 * Description:
 *
 * to set the address of call back function the response
 * for handling the code of ISR
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <Timer1_setCallBack+0x6>
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	9a 83       	std	Y+2, r25	; 0x02
    1e54:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * set the address of the
	 * call back function in the application or Upper layer
	 */
	g_callBackPtr=a_ptr;
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	9a 81       	ldd	r25, Y+2	; 0x02
    1e5a:	90 93 7a 01 	sts	0x017A, r25
    1e5e:	80 93 79 01 	sts	0x0179, r24
}
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <UART_init>:
 * Function name UART_init
 *
 * Description:
 *  to initialize active the URAT in AVR
 */
void UART_init(const UART_ConfigType *Config_Ptr){
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <UART_init+0x6>
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <UART_init+0x8>
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	9c 83       	std	Y+4, r25	; 0x04
    1e7a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 rate_value;          /*to hold the required value to UBRR*/

	UCSRA=(1<<U2X);      /* to using the asynchronous*/
    1e7c:	eb e2       	ldi	r30, 0x2B	; 43
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	82 e0       	ldi	r24, 0x02	; 2
    1e82:	80 83       	st	Z, r24
	/*
	 * RXEN=1-->to enable URAT Reciver
	 * TXEN=1->>to enable URAT Sender
	 * (Config_Ptr->bit_data)&(0x04)-->to set the UCSZ2_Bit
	 */
	UCSRB=(1<<RXEN)|(1<<TXEN)|((Config_Ptr->bit_data)&(0x04));
    1e84:	aa e2       	ldi	r26, 0x2A	; 42
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	eb 81       	ldd	r30, Y+3	; 0x03
    1e8a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e8c:	80 81       	ld	r24, Z
    1e8e:	84 70       	andi	r24, 0x04	; 4
    1e90:	88 61       	ori	r24, 0x18	; 24
    1e92:	8c 93       	st	X, r24
	UCSRC=(1<<URSEL)|((Config_Ptr->stop_bit)<<USBS)|((Config_Ptr->parity)<<UPM0)|((Config_Ptr->bit_data)<<UCSZ0);
    1e94:	a0 e4       	ldi	r26, 0x40	; 64
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	eb 81       	ldd	r30, Y+3	; 0x03
    1e9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e9c:	82 81       	ldd	r24, Z+2	; 0x02
    1e9e:	88 2f       	mov	r24, r24
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	28 2f       	mov	r18, r24
    1eb0:	20 68       	ori	r18, 0x80	; 128
    1eb2:	eb 81       	ldd	r30, Y+3	; 0x03
    1eb4:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb6:	81 81       	ldd	r24, Z+1	; 0x01
    1eb8:	88 2f       	mov	r24, r24
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	82 95       	swap	r24
    1ebe:	92 95       	swap	r25
    1ec0:	90 7f       	andi	r25, 0xF0	; 240
    1ec2:	98 27       	eor	r25, r24
    1ec4:	80 7f       	andi	r24, 0xF0	; 240
    1ec6:	98 27       	eor	r25, r24
    1ec8:	28 2b       	or	r18, r24
    1eca:	eb 81       	ldd	r30, Y+3	; 0x03
    1ecc:	fc 81       	ldd	r31, Y+4	; 0x04
    1ece:	80 81       	ld	r24, Z
    1ed0:	88 2f       	mov	r24, r24
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	82 2b       	or	r24, r18
    1eda:	8c 93       	st	X, r24
	rate_value=(uint16)(((F_CPU/(Config_Ptr->baud_rate*8UL)))-1);
    1edc:	eb 81       	ldd	r30, Y+3	; 0x03
    1ede:	fc 81       	ldd	r31, Y+4	; 0x04
    1ee0:	83 81       	ldd	r24, Z+3	; 0x03
    1ee2:	94 81       	ldd	r25, Z+4	; 0x04
    1ee4:	cc 01       	movw	r24, r24
    1ee6:	a0 e0       	ldi	r26, 0x00	; 0
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	aa 1f       	adc	r26, r26
    1ef0:	bb 1f       	adc	r27, r27
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	aa 1f       	adc	r26, r26
    1ef8:	bb 1f       	adc	r27, r27
    1efa:	88 0f       	add	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	aa 1f       	adc	r26, r26
    1f00:	bb 1f       	adc	r27, r27
    1f02:	9c 01       	movw	r18, r24
    1f04:	ad 01       	movw	r20, r26
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	92 e1       	ldi	r25, 0x12	; 18
    1f0a:	aa e7       	ldi	r26, 0x7A	; 122
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	bc 01       	movw	r22, r24
    1f10:	cd 01       	movw	r24, r26
    1f12:	0e 94 28 10 	call	0x2050	; 0x2050 <__udivmodsi4>
    1f16:	da 01       	movw	r26, r20
    1f18:	c9 01       	movw	r24, r18
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	/*boat rate*/
	UBRRL=rate_value;
    1f20:	e9 e2       	ldi	r30, 0x29	; 41
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	80 83       	st	Z, r24
	UBRRH=rate_value>>8;
    1f28:	e0 e4       	ldi	r30, 0x40	; 64
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f30:	89 2f       	mov	r24, r25
    1f32:	99 27       	eor	r25, r25
    1f34:	80 83       	st	Z, r24
}
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	08 95       	ret

00001f44 <UART_sendByte>:
 * Function name UART_sendByte
 *
 * Description:
 *  to send data to another device
 */
void UART_sendByte(const uint8 data){
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	0f 92       	push	r0
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	89 83       	std	Y+1, r24	; 0x01
	/*polling to ensure there is unread_data */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    1f50:	eb e2       	ldi	r30, 0x2B	; 43
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	88 2f       	mov	r24, r24
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	80 72       	andi	r24, 0x20	; 32
    1f5c:	90 70       	andi	r25, 0x00	; 0
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	b9 f3       	breq	.-18     	; 0x1f50 <UART_sendByte+0xc>
	UDR=data;       /*send the required data*/
    1f62:	ec e2       	ldi	r30, 0x2C	; 44
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	80 83       	st	Z, r24
}
    1f6a:	0f 90       	pop	r0
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <UART_recieveByte>:
 * Function name UART_recieveByte
 *
 * Description:
 *  to recieve data from another device
 */
uint8 UART_recieveByte(void){
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
	/*polling to ensure there is the required data */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    1f7a:	eb e2       	ldi	r30, 0x2B	; 43
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	88 23       	and	r24, r24
    1f82:	dc f7       	brge	.-10     	; 0x1f7a <UART_recieveByte+0x8>
	return UDR;          /*return this data*/
    1f84:	ec e2       	ldi	r30, 0x2C	; 44
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
}
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <UART_sendString>:
 * Function name UART_sendString
 *
 * Description:
 *  to send string to another device
 */
void UART_sendString(const uint8* str){
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <UART_sendString+0x6>
    1f96:	0f 92       	push	r0
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	9b 83       	std	Y+3, r25	; 0x03
    1f9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 index_str=0;          /*counter*/
    1fa0:	19 82       	std	Y+1, r1	; 0x01
    1fa2:	0e c0       	rjmp	.+28     	; 0x1fc0 <UART_sendString+0x30>
	while(str[index_str]!='\0'){
		UART_sendByte(str[index_str]);
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	9b 81       	ldd	r25, Y+3	; 0x03
    1fae:	fc 01       	movw	r30, r24
    1fb0:	e2 0f       	add	r30, r18
    1fb2:	f3 1f       	adc	r31, r19
    1fb4:	80 81       	ld	r24, Z
    1fb6:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <UART_sendByte>
		index_str++;
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	8f 5f       	subi	r24, 0xFF	; 255
    1fbe:	89 83       	std	Y+1, r24	; 0x01
 * Description:
 *  to send string to another device
 */
void UART_sendString(const uint8* str){
	uint8 index_str=0;          /*counter*/
	while(str[index_str]!='\0'){
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fca:	fc 01       	movw	r30, r24
    1fcc:	e2 0f       	add	r30, r18
    1fce:	f3 1f       	adc	r31, r19
    1fd0:	80 81       	ld	r24, Z
    1fd2:	88 23       	and	r24, r24
    1fd4:	39 f7       	brne	.-50     	; 0x1fa4 <UART_sendString+0x14>
		UART_sendByte(str[index_str]);
		index_str++;
	}
}
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <UART_recieveString>:
 * Function name UART_recieveString
 *
 * Description:
 *  to recieve string from another device
 */
void UART_recieveString(uint8* str){
    1fe2:	0f 93       	push	r16
    1fe4:	1f 93       	push	r17
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <UART_recieveString+0xa>
    1fec:	0f 92       	push	r0
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	9b 83       	std	Y+3, r25	; 0x03
    1ff4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 index_str=-1;          /*counter*/
    1ff6:	8f ef       	ldi	r24, 0xFF	; 255
    1ff8:	89 83       	std	Y+1, r24	; 0x01
	do{
		index_str++;
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	8f 5f       	subi	r24, 0xFF	; 255
    1ffe:	89 83       	std	Y+1, r24	; 0x01
		str[index_str]=UART_recieveByte();
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	9b 81       	ldd	r25, Y+3	; 0x03
    200a:	8c 01       	movw	r16, r24
    200c:	02 0f       	add	r16, r18
    200e:	13 1f       	adc	r17, r19
    2010:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <UART_recieveByte>
    2014:	f8 01       	movw	r30, r16
    2016:	80 83       	st	Z, r24
	}while(str[index_str]!='#');
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	9b 81       	ldd	r25, Y+3	; 0x03
    2022:	fc 01       	movw	r30, r24
    2024:	e2 0f       	add	r30, r18
    2026:	f3 1f       	adc	r31, r19
    2028:	80 81       	ld	r24, Z
    202a:	83 32       	cpi	r24, 0x23	; 35
    202c:	31 f7       	brne	.-52     	; 0x1ffa <UART_recieveString+0x18>
	str[index_str] ='\0';
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	28 2f       	mov	r18, r24
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	9b 81       	ldd	r25, Y+3	; 0x03
    2038:	fc 01       	movw	r30, r24
    203a:	e2 0f       	add	r30, r18
    203c:	f3 1f       	adc	r31, r19
    203e:	10 82       	st	Z, r1
}
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	1f 91       	pop	r17
    204c:	0f 91       	pop	r16
    204e:	08 95       	ret

00002050 <__udivmodsi4>:
    2050:	a1 e2       	ldi	r26, 0x21	; 33
    2052:	1a 2e       	mov	r1, r26
    2054:	aa 1b       	sub	r26, r26
    2056:	bb 1b       	sub	r27, r27
    2058:	fd 01       	movw	r30, r26
    205a:	0d c0       	rjmp	.+26     	; 0x2076 <__udivmodsi4_ep>

0000205c <__udivmodsi4_loop>:
    205c:	aa 1f       	adc	r26, r26
    205e:	bb 1f       	adc	r27, r27
    2060:	ee 1f       	adc	r30, r30
    2062:	ff 1f       	adc	r31, r31
    2064:	a2 17       	cp	r26, r18
    2066:	b3 07       	cpc	r27, r19
    2068:	e4 07       	cpc	r30, r20
    206a:	f5 07       	cpc	r31, r21
    206c:	20 f0       	brcs	.+8      	; 0x2076 <__udivmodsi4_ep>
    206e:	a2 1b       	sub	r26, r18
    2070:	b3 0b       	sbc	r27, r19
    2072:	e4 0b       	sbc	r30, r20
    2074:	f5 0b       	sbc	r31, r21

00002076 <__udivmodsi4_ep>:
    2076:	66 1f       	adc	r22, r22
    2078:	77 1f       	adc	r23, r23
    207a:	88 1f       	adc	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	1a 94       	dec	r1
    2080:	69 f7       	brne	.-38     	; 0x205c <__udivmodsi4_loop>
    2082:	60 95       	com	r22
    2084:	70 95       	com	r23
    2086:	80 95       	com	r24
    2088:	90 95       	com	r25
    208a:	9b 01       	movw	r18, r22
    208c:	ac 01       	movw	r20, r24
    208e:	bd 01       	movw	r22, r26
    2090:	cf 01       	movw	r24, r30
    2092:	08 95       	ret

00002094 <__prologue_saves__>:
    2094:	2f 92       	push	r2
    2096:	3f 92       	push	r3
    2098:	4f 92       	push	r4
    209a:	5f 92       	push	r5
    209c:	6f 92       	push	r6
    209e:	7f 92       	push	r7
    20a0:	8f 92       	push	r8
    20a2:	9f 92       	push	r9
    20a4:	af 92       	push	r10
    20a6:	bf 92       	push	r11
    20a8:	cf 92       	push	r12
    20aa:	df 92       	push	r13
    20ac:	ef 92       	push	r14
    20ae:	ff 92       	push	r15
    20b0:	0f 93       	push	r16
    20b2:	1f 93       	push	r17
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	ca 1b       	sub	r28, r26
    20be:	db 0b       	sbc	r29, r27
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	09 94       	ijmp

000020cc <__epilogue_restores__>:
    20cc:	2a 88       	ldd	r2, Y+18	; 0x12
    20ce:	39 88       	ldd	r3, Y+17	; 0x11
    20d0:	48 88       	ldd	r4, Y+16	; 0x10
    20d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    20d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    20d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    20d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    20da:	9b 84       	ldd	r9, Y+11	; 0x0b
    20dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    20de:	b9 84       	ldd	r11, Y+9	; 0x09
    20e0:	c8 84       	ldd	r12, Y+8	; 0x08
    20e2:	df 80       	ldd	r13, Y+7	; 0x07
    20e4:	ee 80       	ldd	r14, Y+6	; 0x06
    20e6:	fd 80       	ldd	r15, Y+5	; 0x05
    20e8:	0c 81       	ldd	r16, Y+4	; 0x04
    20ea:	1b 81       	ldd	r17, Y+3	; 0x03
    20ec:	aa 81       	ldd	r26, Y+2	; 0x02
    20ee:	b9 81       	ldd	r27, Y+1	; 0x01
    20f0:	ce 0f       	add	r28, r30
    20f2:	d1 1d       	adc	r29, r1
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	f8 94       	cli
    20f8:	de bf       	out	0x3e, r29	; 62
    20fa:	0f be       	out	0x3f, r0	; 63
    20fc:	cd bf       	out	0x3d, r28	; 61
    20fe:	ed 01       	movw	r28, r26
    2100:	08 95       	ret

00002102 <_exit>:
    2102:	f8 94       	cli

00002104 <__stop_program>:
    2104:	ff cf       	rjmp	.-2      	; 0x2104 <__stop_program>
